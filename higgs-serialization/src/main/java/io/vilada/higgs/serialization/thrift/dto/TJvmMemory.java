/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-05")
public class TJvmMemory implements org.apache.thrift.TBase<TJvmMemory, TJvmMemory._Fields>, java.io.Serializable, Cloneable, Comparable<TJvmMemory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJvmMemory");

  private static final org.apache.thrift.protocol.TField HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("heapUsed", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HEAP_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("heapCommitted", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("heapMax", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NON_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("nonHeapUsed", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NON_HEAP_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("nonHeapCommitted", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NON_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("nonHeapMax", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryDetail", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJvmMemoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJvmMemoryTupleSchemeFactory();

  public long heapUsed; // required
  public long heapCommitted; // required
  public long heapMax; // required
  public long nonHeapUsed; // required
  public long nonHeapCommitted; // required
  public long nonHeapMax; // required
  public java.util.List<TJvmMemoryDetail> jvmMemoryDetail; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAP_USED((short)1, "heapUsed"),
    HEAP_COMMITTED((short)2, "heapCommitted"),
    HEAP_MAX((short)3, "heapMax"),
    NON_HEAP_USED((short)4, "nonHeapUsed"),
    NON_HEAP_COMMITTED((short)5, "nonHeapCommitted"),
    NON_HEAP_MAX((short)6, "nonHeapMax"),
    JVM_MEMORY_DETAIL((short)8, "jvmMemoryDetail");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAP_USED
          return HEAP_USED;
        case 2: // HEAP_COMMITTED
          return HEAP_COMMITTED;
        case 3: // HEAP_MAX
          return HEAP_MAX;
        case 4: // NON_HEAP_USED
          return NON_HEAP_USED;
        case 5: // NON_HEAP_COMMITTED
          return NON_HEAP_COMMITTED;
        case 6: // NON_HEAP_MAX
          return NON_HEAP_MAX;
        case 8: // JVM_MEMORY_DETAIL
          return JVM_MEMORY_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEAPUSED_ISSET_ID = 0;
  private static final int __HEAPCOMMITTED_ISSET_ID = 1;
  private static final int __HEAPMAX_ISSET_ID = 2;
  private static final int __NONHEAPUSED_ISSET_ID = 3;
  private static final int __NONHEAPCOMMITTED_ISSET_ID = 4;
  private static final int __NONHEAPMAX_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("heapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HEAP_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("heapCommitted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("heapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NON_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("nonHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NON_HEAP_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("nonHeapCommitted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NON_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("nonHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TJvmMemoryDetail"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJvmMemory.class, metaDataMap);
  }

  public TJvmMemory() {
  }

  public TJvmMemory(
    long heapUsed,
    long heapCommitted,
    long heapMax,
    long nonHeapUsed,
    long nonHeapCommitted,
    long nonHeapMax,
    java.util.List<TJvmMemoryDetail> jvmMemoryDetail)
  {
    this();
    this.heapUsed = heapUsed;
    setHeapUsedIsSet(true);
    this.heapCommitted = heapCommitted;
    setHeapCommittedIsSet(true);
    this.heapMax = heapMax;
    setHeapMaxIsSet(true);
    this.nonHeapUsed = nonHeapUsed;
    setNonHeapUsedIsSet(true);
    this.nonHeapCommitted = nonHeapCommitted;
    setNonHeapCommittedIsSet(true);
    this.nonHeapMax = nonHeapMax;
    setNonHeapMaxIsSet(true);
    this.jvmMemoryDetail = jvmMemoryDetail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJvmMemory(TJvmMemory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.heapUsed = other.heapUsed;
    this.heapCommitted = other.heapCommitted;
    this.heapMax = other.heapMax;
    this.nonHeapUsed = other.nonHeapUsed;
    this.nonHeapCommitted = other.nonHeapCommitted;
    this.nonHeapMax = other.nonHeapMax;
    if (other.isSetJvmMemoryDetail()) {
      java.util.List<TJvmMemoryDetail> __this__jvmMemoryDetail = new java.util.ArrayList<TJvmMemoryDetail>(other.jvmMemoryDetail.size());
      for (TJvmMemoryDetail other_element : other.jvmMemoryDetail) {
        __this__jvmMemoryDetail.add(other_element);
      }
      this.jvmMemoryDetail = __this__jvmMemoryDetail;
    }
  }

  public TJvmMemory deepCopy() {
    return new TJvmMemory(this);
  }


  public void clear() {
    setHeapUsedIsSet(false);
    this.heapUsed = 0;
    setHeapCommittedIsSet(false);
    this.heapCommitted = 0;
    setHeapMaxIsSet(false);
    this.heapMax = 0;
    setNonHeapUsedIsSet(false);
    this.nonHeapUsed = 0;
    setNonHeapCommittedIsSet(false);
    this.nonHeapCommitted = 0;
    setNonHeapMaxIsSet(false);
    this.nonHeapMax = 0;
    this.jvmMemoryDetail = null;
  }

  public long getHeapUsed() {
    return this.heapUsed;
  }

  public TJvmMemory setHeapUsed(long heapUsed) {
    this.heapUsed = heapUsed;
    setHeapUsedIsSet(true);
    return this;
  }

  public void unsetHeapUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEAPUSED_ISSET_ID);
  }

  /** Returns true if field heapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEAPUSED_ISSET_ID);
  }

  public void setHeapUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEAPUSED_ISSET_ID, value);
  }

  public long getHeapCommitted() {
    return this.heapCommitted;
  }

  public TJvmMemory setHeapCommitted(long heapCommitted) {
    this.heapCommitted = heapCommitted;
    setHeapCommittedIsSet(true);
    return this;
  }

  public void unsetHeapCommitted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEAPCOMMITTED_ISSET_ID);
  }

  /** Returns true if field heapCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapCommitted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEAPCOMMITTED_ISSET_ID);
  }

  public void setHeapCommittedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEAPCOMMITTED_ISSET_ID, value);
  }

  public long getHeapMax() {
    return this.heapMax;
  }

  public TJvmMemory setHeapMax(long heapMax) {
    this.heapMax = heapMax;
    setHeapMaxIsSet(true);
    return this;
  }

  public void unsetHeapMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEAPMAX_ISSET_ID);
  }

  /** Returns true if field heapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetHeapMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEAPMAX_ISSET_ID);
  }

  public void setHeapMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEAPMAX_ISSET_ID, value);
  }

  public long getNonHeapUsed() {
    return this.nonHeapUsed;
  }

  public TJvmMemory setNonHeapUsed(long nonHeapUsed) {
    this.nonHeapUsed = nonHeapUsed;
    setNonHeapUsedIsSet(true);
    return this;
  }

  public void unsetNonHeapUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NONHEAPUSED_ISSET_ID);
  }

  /** Returns true if field nonHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetNonHeapUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NONHEAPUSED_ISSET_ID);
  }

  public void setNonHeapUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NONHEAPUSED_ISSET_ID, value);
  }

  public long getNonHeapCommitted() {
    return this.nonHeapCommitted;
  }

  public TJvmMemory setNonHeapCommitted(long nonHeapCommitted) {
    this.nonHeapCommitted = nonHeapCommitted;
    setNonHeapCommittedIsSet(true);
    return this;
  }

  public void unsetNonHeapCommitted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NONHEAPCOMMITTED_ISSET_ID);
  }

  /** Returns true if field nonHeapCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSetNonHeapCommitted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NONHEAPCOMMITTED_ISSET_ID);
  }

  public void setNonHeapCommittedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NONHEAPCOMMITTED_ISSET_ID, value);
  }

  public long getNonHeapMax() {
    return this.nonHeapMax;
  }

  public TJvmMemory setNonHeapMax(long nonHeapMax) {
    this.nonHeapMax = nonHeapMax;
    setNonHeapMaxIsSet(true);
    return this;
  }

  public void unsetNonHeapMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NONHEAPMAX_ISSET_ID);
  }

  /** Returns true if field nonHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetNonHeapMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NONHEAPMAX_ISSET_ID);
  }

  public void setNonHeapMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NONHEAPMAX_ISSET_ID, value);
  }

  public int getJvmMemoryDetailSize() {
    return (this.jvmMemoryDetail == null) ? 0 : this.jvmMemoryDetail.size();
  }

  public java.util.Iterator<TJvmMemoryDetail> getJvmMemoryDetailIterator() {
    return (this.jvmMemoryDetail == null) ? null : this.jvmMemoryDetail.iterator();
  }

  public void addToJvmMemoryDetail(TJvmMemoryDetail elem) {
    if (this.jvmMemoryDetail == null) {
      this.jvmMemoryDetail = new java.util.ArrayList<TJvmMemoryDetail>();
    }
    this.jvmMemoryDetail.add(elem);
  }

  public java.util.List<TJvmMemoryDetail> getJvmMemoryDetail() {
    return this.jvmMemoryDetail;
  }

  public TJvmMemory setJvmMemoryDetail(java.util.List<TJvmMemoryDetail> jvmMemoryDetail) {
    this.jvmMemoryDetail = jvmMemoryDetail;
    return this;
  }

  public void unsetJvmMemoryDetail() {
    this.jvmMemoryDetail = null;
  }

  /** Returns true if field jvmMemoryDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryDetail() {
    return this.jvmMemoryDetail != null;
  }

  public void setJvmMemoryDetailIsSet(boolean value) {
    if (!value) {
      this.jvmMemoryDetail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAP_USED:
      if (value == null) {
        unsetHeapUsed();
      } else {
        setHeapUsed((Long)value);
      }
      break;

    case HEAP_COMMITTED:
      if (value == null) {
        unsetHeapCommitted();
      } else {
        setHeapCommitted((Long)value);
      }
      break;

    case HEAP_MAX:
      if (value == null) {
        unsetHeapMax();
      } else {
        setHeapMax((Long)value);
      }
      break;

    case NON_HEAP_USED:
      if (value == null) {
        unsetNonHeapUsed();
      } else {
        setNonHeapUsed((Long)value);
      }
      break;

    case NON_HEAP_COMMITTED:
      if (value == null) {
        unsetNonHeapCommitted();
      } else {
        setNonHeapCommitted((Long)value);
      }
      break;

    case NON_HEAP_MAX:
      if (value == null) {
        unsetNonHeapMax();
      } else {
        setNonHeapMax((Long)value);
      }
      break;

    case JVM_MEMORY_DETAIL:
      if (value == null) {
        unsetJvmMemoryDetail();
      } else {
        setJvmMemoryDetail((java.util.List<TJvmMemoryDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAP_USED:
      return getHeapUsed();

    case HEAP_COMMITTED:
      return getHeapCommitted();

    case HEAP_MAX:
      return getHeapMax();

    case NON_HEAP_USED:
      return getNonHeapUsed();

    case NON_HEAP_COMMITTED:
      return getNonHeapCommitted();

    case NON_HEAP_MAX:
      return getNonHeapMax();

    case JVM_MEMORY_DETAIL:
      return getJvmMemoryDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAP_USED:
      return isSetHeapUsed();
    case HEAP_COMMITTED:
      return isSetHeapCommitted();
    case HEAP_MAX:
      return isSetHeapMax();
    case NON_HEAP_USED:
      return isSetNonHeapUsed();
    case NON_HEAP_COMMITTED:
      return isSetNonHeapCommitted();
    case NON_HEAP_MAX:
      return isSetNonHeapMax();
    case JVM_MEMORY_DETAIL:
      return isSetJvmMemoryDetail();
    }
    throw new IllegalStateException();
  }


  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TJvmMemory)
      return this.equals((TJvmMemory)that);
    return false;
  }

  public boolean equals(TJvmMemory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_heapUsed = true;
    boolean that_present_heapUsed = true;
    if (this_present_heapUsed || that_present_heapUsed) {
      if (!(this_present_heapUsed && that_present_heapUsed))
        return false;
      if (this.heapUsed != that.heapUsed)
        return false;
    }

    boolean this_present_heapCommitted = true;
    boolean that_present_heapCommitted = true;
    if (this_present_heapCommitted || that_present_heapCommitted) {
      if (!(this_present_heapCommitted && that_present_heapCommitted))
        return false;
      if (this.heapCommitted != that.heapCommitted)
        return false;
    }

    boolean this_present_heapMax = true;
    boolean that_present_heapMax = true;
    if (this_present_heapMax || that_present_heapMax) {
      if (!(this_present_heapMax && that_present_heapMax))
        return false;
      if (this.heapMax != that.heapMax)
        return false;
    }

    boolean this_present_nonHeapUsed = true;
    boolean that_present_nonHeapUsed = true;
    if (this_present_nonHeapUsed || that_present_nonHeapUsed) {
      if (!(this_present_nonHeapUsed && that_present_nonHeapUsed))
        return false;
      if (this.nonHeapUsed != that.nonHeapUsed)
        return false;
    }

    boolean this_present_nonHeapCommitted = true;
    boolean that_present_nonHeapCommitted = true;
    if (this_present_nonHeapCommitted || that_present_nonHeapCommitted) {
      if (!(this_present_nonHeapCommitted && that_present_nonHeapCommitted))
        return false;
      if (this.nonHeapCommitted != that.nonHeapCommitted)
        return false;
    }

    boolean this_present_nonHeapMax = true;
    boolean that_present_nonHeapMax = true;
    if (this_present_nonHeapMax || that_present_nonHeapMax) {
      if (!(this_present_nonHeapMax && that_present_nonHeapMax))
        return false;
      if (this.nonHeapMax != that.nonHeapMax)
        return false;
    }

    boolean this_present_jvmMemoryDetail = true && this.isSetJvmMemoryDetail();
    boolean that_present_jvmMemoryDetail = true && that.isSetJvmMemoryDetail();
    if (this_present_jvmMemoryDetail || that_present_jvmMemoryDetail) {
      if (!(this_present_jvmMemoryDetail && that_present_jvmMemoryDetail))
        return false;
      if (!this.jvmMemoryDetail.equals(that.jvmMemoryDetail))
        return false;
    }

    return true;
  }


  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heapUsed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heapCommitted);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(heapMax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nonHeapUsed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nonHeapCommitted);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nonHeapMax);

    hashCode = hashCode * 8191 + ((isSetJvmMemoryDetail()) ? 131071 : 524287);
    if (isSetJvmMemoryDetail())
      hashCode = hashCode * 8191 + jvmMemoryDetail.hashCode();

    return hashCode;
  }


  public int compareTo(TJvmMemory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeapUsed()).compareTo(other.isSetHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapUsed, other.heapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapCommitted()).compareTo(other.isSetHeapCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapCommitted, other.heapCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeapMax()).compareTo(other.isSetHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heapMax, other.heapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonHeapUsed()).compareTo(other.isSetNonHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonHeapUsed, other.nonHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonHeapCommitted()).compareTo(other.isSetNonHeapCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonHeapCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonHeapCommitted, other.nonHeapCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonHeapMax()).compareTo(other.isSetNonHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonHeapMax, other.nonHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryDetail()).compareTo(other.isSetJvmMemoryDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryDetail, other.jvmMemoryDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }


  public String toString() {
    StringBuilder sb = new StringBuilder("TJvmMemory(");
    boolean first = true;

    sb.append("heapUsed:");
    sb.append(this.heapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapCommitted:");
    sb.append(this.heapCommitted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heapMax:");
    sb.append(this.heapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonHeapUsed:");
    sb.append(this.nonHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonHeapCommitted:");
    sb.append(this.nonHeapCommitted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonHeapMax:");
    sb.append(this.nonHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryDetail:");
    if (this.jvmMemoryDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmMemoryDetail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJvmMemoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJvmMemoryStandardScheme getScheme() {
      return new TJvmMemoryStandardScheme();
    }
  }

  private static class TJvmMemoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJvmMemory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TJvmMemory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.heapUsed = iprot.readI64();
              struct.setHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEAP_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.heapCommitted = iprot.readI64();
              struct.setHeapCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.heapMax = iprot.readI64();
              struct.setHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NON_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonHeapUsed = iprot.readI64();
              struct.setNonHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NON_HEAP_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonHeapCommitted = iprot.readI64();
              struct.setNonHeapCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NON_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonHeapMax = iprot.readI64();
              struct.setNonHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JVM_MEMORY_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.jvmMemoryDetail = new java.util.ArrayList<TJvmMemoryDetail>(_list24.size);
                TJvmMemoryDetail _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new TJvmMemoryDetail();
                  _elem25.read(iprot);
                  struct.jvmMemoryDetail.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setJvmMemoryDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TJvmMemory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.heapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.heapCommitted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.heapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NON_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.nonHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NON_HEAP_COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.nonHeapCommitted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NON_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.nonHeapMax);
      oprot.writeFieldEnd();
      if (struct.jvmMemoryDetail != null) {
        oprot.writeFieldBegin(JVM_MEMORY_DETAIL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jvmMemoryDetail.size()));
          for (TJvmMemoryDetail _iter27 : struct.jvmMemoryDetail)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJvmMemoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJvmMemoryTupleScheme getScheme() {
      return new TJvmMemoryTupleScheme();
    }
  }

  private static class TJvmMemoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJvmMemory> {


    public void write(org.apache.thrift.protocol.TProtocol prot, TJvmMemory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHeapUsed()) {
        optionals.set(0);
      }
      if (struct.isSetHeapCommitted()) {
        optionals.set(1);
      }
      if (struct.isSetHeapMax()) {
        optionals.set(2);
      }
      if (struct.isSetNonHeapUsed()) {
        optionals.set(3);
      }
      if (struct.isSetNonHeapCommitted()) {
        optionals.set(4);
      }
      if (struct.isSetNonHeapMax()) {
        optionals.set(5);
      }
      if (struct.isSetJvmMemoryDetail()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetHeapUsed()) {
        oprot.writeI64(struct.heapUsed);
      }
      if (struct.isSetHeapCommitted()) {
        oprot.writeI64(struct.heapCommitted);
      }
      if (struct.isSetHeapMax()) {
        oprot.writeI64(struct.heapMax);
      }
      if (struct.isSetNonHeapUsed()) {
        oprot.writeI64(struct.nonHeapUsed);
      }
      if (struct.isSetNonHeapCommitted()) {
        oprot.writeI64(struct.nonHeapCommitted);
      }
      if (struct.isSetNonHeapMax()) {
        oprot.writeI64(struct.nonHeapMax);
      }
      if (struct.isSetJvmMemoryDetail()) {
        {
          oprot.writeI32(struct.jvmMemoryDetail.size());
          for (TJvmMemoryDetail _iter28 : struct.jvmMemoryDetail)
          {
            _iter28.write(oprot);
          }
        }
      }
    }


    public void read(org.apache.thrift.protocol.TProtocol prot, TJvmMemory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.heapUsed = iprot.readI64();
        struct.setHeapUsedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.heapCommitted = iprot.readI64();
        struct.setHeapCommittedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.heapMax = iprot.readI64();
        struct.setHeapMaxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nonHeapUsed = iprot.readI64();
        struct.setNonHeapUsedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nonHeapCommitted = iprot.readI64();
        struct.setNonHeapCommittedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nonHeapMax = iprot.readI64();
        struct.setNonHeapMaxIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jvmMemoryDetail = new java.util.ArrayList<TJvmMemoryDetail>(_list29.size);
          TJvmMemoryDetail _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TJvmMemoryDetail();
            _elem30.read(iprot);
            struct.jvmMemoryDetail.add(_elem30);
          }
        }
        struct.setJvmMemoryDetailIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

