/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-22")
public class TAgentInfo implements org.apache.thrift.TBase<TAgentInfo, TAgentInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentInfo");

  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AGENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("agentVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("vmVersion", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VM_ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("vmArguments", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("osName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SERVER_META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("serverMetaData", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tierId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAgentInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAgentInfoTupleSchemeFactory();

  public String hostname; // required
  public String ip; // required
  public int pid; // required
  public String agentVersion; // required
  public String vmVersion; // required
  public String vmArguments; // required
  public String osName; // required
  public long startTimestamp; // required
  public java.util.List<TServerMetaData> serverMetaData; // optional
  public String instanceId; // optional
  public String tierId; // optional
  public String appId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAME((short)1, "hostname"),
    IP((short)2, "ip"),
    PID((short)3, "pid"),
    AGENT_VERSION((short)4, "agentVersion"),
    VM_VERSION((short)5, "vmVersion"),
    VM_ARGUMENTS((short)6, "vmArguments"),
    OS_NAME((short)7, "osName"),
    START_TIMESTAMP((short)8, "startTimestamp"),
    SERVER_META_DATA((short)11, "serverMetaData"),
    INSTANCE_ID((short)12, "instanceId"),
    TIER_ID((short)13, "tierId"),
    APP_ID((short)14, "appId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAME
          return HOSTNAME;
        case 2: // IP
          return IP;
        case 3: // PID
          return PID;
        case 4: // AGENT_VERSION
          return AGENT_VERSION;
        case 5: // VM_VERSION
          return VM_VERSION;
        case 6: // VM_ARGUMENTS
          return VM_ARGUMENTS;
        case 7: // OS_NAME
          return OS_NAME;
        case 8: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 11: // SERVER_META_DATA
          return SERVER_META_DATA;
        case 12: // INSTANCE_ID
          return INSTANCE_ID;
        case 13: // TIER_ID
          return TIER_ID;
        case 14: // APP_ID
          return APP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STARTTIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SERVER_META_DATA,_Fields.INSTANCE_ID,_Fields.TIER_ID,_Fields.APP_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("agentVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("vmVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VM_ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("vmArguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_NAME, new org.apache.thrift.meta_data.FieldMetaData("osName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVER_META_DATA, new org.apache.thrift.meta_data.FieldMetaData("serverMetaData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TServerMetaData"))));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER_ID, new org.apache.thrift.meta_data.FieldMetaData("tierId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentInfo.class, metaDataMap);
  }

  public TAgentInfo() {
  }

  public TAgentInfo(
    String hostname,
    String ip,
    int pid,
    String agentVersion,
    String vmVersion,
    String vmArguments,
    String osName,
    long startTimestamp)
  {
    this();
    this.hostname = hostname;
    this.ip = ip;
    this.pid = pid;
    setPidIsSet(true);
    this.agentVersion = agentVersion;
    this.vmVersion = vmVersion;
    this.vmArguments = vmArguments;
    this.osName = osName;
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentInfo(TAgentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.pid = other.pid;
    if (other.isSetAgentVersion()) {
      this.agentVersion = other.agentVersion;
    }
    if (other.isSetVmVersion()) {
      this.vmVersion = other.vmVersion;
    }
    if (other.isSetVmArguments()) {
      this.vmArguments = other.vmArguments;
    }
    if (other.isSetOsName()) {
      this.osName = other.osName;
    }
    this.startTimestamp = other.startTimestamp;
    if (other.isSetServerMetaData()) {
      java.util.List<TServerMetaData> __this__serverMetaData = new java.util.ArrayList<TServerMetaData>(other.serverMetaData.size());
      for (TServerMetaData other_element : other.serverMetaData) {
        __this__serverMetaData.add(other_element);
      }
      this.serverMetaData = __this__serverMetaData;
    }
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetTierId()) {
      this.tierId = other.tierId;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
  }

  public TAgentInfo deepCopy() {
    return new TAgentInfo(this);
  }

  public void clear() {
    this.hostname = null;
    this.ip = null;
    setPidIsSet(false);
    this.pid = 0;
    this.agentVersion = null;
    this.vmVersion = null;
    this.vmArguments = null;
    this.osName = null;
    setStartTimestampIsSet(false);
    this.startTimestamp = 0;
    this.serverMetaData = null;
    this.instanceId = null;
    this.tierId = null;
    this.appId = null;
  }

  public String getHostname() {
    return this.hostname;
  }

  public TAgentInfo setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public TAgentInfo setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public TAgentInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getAgentVersion() {
    return this.agentVersion;
  }

  public TAgentInfo setAgentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
    return this;
  }

  public void unsetAgentVersion() {
    this.agentVersion = null;
  }

  /** Returns true if field agentVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentVersion() {
    return this.agentVersion != null;
  }

  public void setAgentVersionIsSet(boolean value) {
    if (!value) {
      this.agentVersion = null;
    }
  }

  public String getVmVersion() {
    return this.vmVersion;
  }

  public TAgentInfo setVmVersion(String vmVersion) {
    this.vmVersion = vmVersion;
    return this;
  }

  public void unsetVmVersion() {
    this.vmVersion = null;
  }

  /** Returns true if field vmVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetVmVersion() {
    return this.vmVersion != null;
  }

  public void setVmVersionIsSet(boolean value) {
    if (!value) {
      this.vmVersion = null;
    }
  }

  public String getVmArguments() {
    return this.vmArguments;
  }

  public TAgentInfo setVmArguments(String vmArguments) {
    this.vmArguments = vmArguments;
    return this;
  }

  public void unsetVmArguments() {
    this.vmArguments = null;
  }

  /** Returns true if field vmArguments is set (has been assigned a value) and false otherwise */
  public boolean isSetVmArguments() {
    return this.vmArguments != null;
  }

  public void setVmArgumentsIsSet(boolean value) {
    if (!value) {
      this.vmArguments = null;
    }
  }

  public String getOsName() {
    return this.osName;
  }

  public TAgentInfo setOsName(String osName) {
    this.osName = osName;
    return this;
  }

  public void unsetOsName() {
    this.osName = null;
  }

  /** Returns true if field osName is set (has been assigned a value) and false otherwise */
  public boolean isSetOsName() {
    return this.osName != null;
  }

  public void setOsNameIsSet(boolean value) {
    if (!value) {
      this.osName = null;
    }
  }

  public long getStartTimestamp() {
    return this.startTimestamp;
  }

  public TAgentInfo setStartTimestamp(long startTimestamp) {
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    return this;
  }

  public void unsetStartTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  public void setStartTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID, value);
  }

  public int getServerMetaDataSize() {
    return (this.serverMetaData == null) ? 0 : this.serverMetaData.size();
  }

  public java.util.Iterator<TServerMetaData> getServerMetaDataIterator() {
    return (this.serverMetaData == null) ? null : this.serverMetaData.iterator();
  }

  public void addToServerMetaData(TServerMetaData elem) {
    if (this.serverMetaData == null) {
      this.serverMetaData = new java.util.ArrayList<TServerMetaData>();
    }
    this.serverMetaData.add(elem);
  }

  public java.util.List<TServerMetaData> getServerMetaData() {
    return this.serverMetaData;
  }

  public TAgentInfo setServerMetaData(java.util.List<TServerMetaData> serverMetaData) {
    this.serverMetaData = serverMetaData;
    return this;
  }

  public void unsetServerMetaData() {
    this.serverMetaData = null;
  }

  /** Returns true if field serverMetaData is set (has been assigned a value) and false otherwise */
  public boolean isSetServerMetaData() {
    return this.serverMetaData != null;
  }

  public void setServerMetaDataIsSet(boolean value) {
    if (!value) {
      this.serverMetaData = null;
    }
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public TAgentInfo setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getTierId() {
    return this.tierId;
  }

  public TAgentInfo setTierId(String tierId) {
    this.tierId = tierId;
    return this;
  }

  public void unsetTierId() {
    this.tierId = null;
  }

  /** Returns true if field tierId is set (has been assigned a value) and false otherwise */
  public boolean isSetTierId() {
    return this.tierId != null;
  }

  public void setTierIdIsSet(boolean value) {
    if (!value) {
      this.tierId = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public TAgentInfo setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case AGENT_VERSION:
      if (value == null) {
        unsetAgentVersion();
      } else {
        setAgentVersion((String)value);
      }
      break;

    case VM_VERSION:
      if (value == null) {
        unsetVmVersion();
      } else {
        setVmVersion((String)value);
      }
      break;

    case VM_ARGUMENTS:
      if (value == null) {
        unsetVmArguments();
      } else {
        setVmArguments((String)value);
      }
      break;

    case OS_NAME:
      if (value == null) {
        unsetOsName();
      } else {
        setOsName((String)value);
      }
      break;

    case START_TIMESTAMP:
      if (value == null) {
        unsetStartTimestamp();
      } else {
        setStartTimestamp((Long)value);
      }
      break;

    case SERVER_META_DATA:
      if (value == null) {
        unsetServerMetaData();
      } else {
        setServerMetaData((java.util.List<TServerMetaData>)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case TIER_ID:
      if (value == null) {
        unsetTierId();
      } else {
        setTierId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAME:
      return getHostname();

    case IP:
      return getIp();

    case PID:
      return getPid();

    case AGENT_VERSION:
      return getAgentVersion();

    case VM_VERSION:
      return getVmVersion();

    case VM_ARGUMENTS:
      return getVmArguments();

    case OS_NAME:
      return getOsName();

    case START_TIMESTAMP:
      return getStartTimestamp();

    case SERVER_META_DATA:
      return getServerMetaData();

    case INSTANCE_ID:
      return getInstanceId();

    case TIER_ID:
      return getTierId();

    case APP_ID:
      return getAppId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAME:
      return isSetHostname();
    case IP:
      return isSetIp();
    case PID:
      return isSetPid();
    case AGENT_VERSION:
      return isSetAgentVersion();
    case VM_VERSION:
      return isSetVmVersion();
    case VM_ARGUMENTS:
      return isSetVmArguments();
    case OS_NAME:
      return isSetOsName();
    case START_TIMESTAMP:
      return isSetStartTimestamp();
    case SERVER_META_DATA:
      return isSetServerMetaData();
    case INSTANCE_ID:
      return isSetInstanceId();
    case TIER_ID:
      return isSetTierId();
    case APP_ID:
      return isSetAppId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAgentInfo)
      return this.equals((TAgentInfo)that);
    return false;
  }

  public boolean equals(TAgentInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_agentVersion = true && this.isSetAgentVersion();
    boolean that_present_agentVersion = true && that.isSetAgentVersion();
    if (this_present_agentVersion || that_present_agentVersion) {
      if (!(this_present_agentVersion && that_present_agentVersion))
        return false;
      if (!this.agentVersion.equals(that.agentVersion))
        return false;
    }

    boolean this_present_vmVersion = true && this.isSetVmVersion();
    boolean that_present_vmVersion = true && that.isSetVmVersion();
    if (this_present_vmVersion || that_present_vmVersion) {
      if (!(this_present_vmVersion && that_present_vmVersion))
        return false;
      if (!this.vmVersion.equals(that.vmVersion))
        return false;
    }

    boolean this_present_vmArguments = true && this.isSetVmArguments();
    boolean that_present_vmArguments = true && that.isSetVmArguments();
    if (this_present_vmArguments || that_present_vmArguments) {
      if (!(this_present_vmArguments && that_present_vmArguments))
        return false;
      if (!this.vmArguments.equals(that.vmArguments))
        return false;
    }

    boolean this_present_osName = true && this.isSetOsName();
    boolean that_present_osName = true && that.isSetOsName();
    if (this_present_osName || that_present_osName) {
      if (!(this_present_osName && that_present_osName))
        return false;
      if (!this.osName.equals(that.osName))
        return false;
    }

    boolean this_present_startTimestamp = true;
    boolean that_present_startTimestamp = true;
    if (this_present_startTimestamp || that_present_startTimestamp) {
      if (!(this_present_startTimestamp && that_present_startTimestamp))
        return false;
      if (this.startTimestamp != that.startTimestamp)
        return false;
    }

    boolean this_present_serverMetaData = true && this.isSetServerMetaData();
    boolean that_present_serverMetaData = true && that.isSetServerMetaData();
    if (this_present_serverMetaData || that_present_serverMetaData) {
      if (!(this_present_serverMetaData && that_present_serverMetaData))
        return false;
      if (!this.serverMetaData.equals(that.serverMetaData))
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_tierId = true && this.isSetTierId();
    boolean that_present_tierId = true && that.isSetTierId();
    if (this_present_tierId || that_present_tierId) {
      if (!(this_present_tierId && that_present_tierId))
        return false;
      if (!this.tierId.equals(that.tierId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHostname()) ? 131071 : 524287);
    if (isSetHostname())
      hashCode = hashCode * 8191 + hostname.hashCode();

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + pid;

    hashCode = hashCode * 8191 + ((isSetAgentVersion()) ? 131071 : 524287);
    if (isSetAgentVersion())
      hashCode = hashCode * 8191 + agentVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetVmVersion()) ? 131071 : 524287);
    if (isSetVmVersion())
      hashCode = hashCode * 8191 + vmVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetVmArguments()) ? 131071 : 524287);
    if (isSetVmArguments())
      hashCode = hashCode * 8191 + vmArguments.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsName()) ? 131071 : 524287);
    if (isSetOsName())
      hashCode = hashCode * 8191 + osName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTimestamp);

    hashCode = hashCode * 8191 + ((isSetServerMetaData()) ? 131071 : 524287);
    if (isSetServerMetaData())
      hashCode = hashCode * 8191 + serverMetaData.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
    if (isSetInstanceId())
      hashCode = hashCode * 8191 + instanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTierId()) ? 131071 : 524287);
    if (isSetTierId())
      hashCode = hashCode * 8191 + tierId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    return hashCode;
  }

  public int compareTo(TAgentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentVersion()).compareTo(other.isSetAgentVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentVersion, other.agentVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVmVersion()).compareTo(other.isSetVmVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVmVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vmVersion, other.vmVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVmArguments()).compareTo(other.isSetVmArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVmArguments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vmArguments, other.vmArguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsName()).compareTo(other.isSetOsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osName, other.osName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(other.isSetStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, other.startTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerMetaData()).compareTo(other.isSetServerMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverMetaData, other.serverMetaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTierId()).compareTo(other.isSetTierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierId, other.tierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAgentInfo(");
    boolean first = true;

    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentVersion:");
    if (this.agentVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.agentVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vmVersion:");
    if (this.vmVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.vmVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vmArguments:");
    if (this.vmArguments == null) {
      sb.append("null");
    } else {
      sb.append(this.vmArguments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osName:");
    if (this.osName == null) {
      sb.append("null");
    } else {
      sb.append(this.osName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimestamp:");
    sb.append(this.startTimestamp);
    first = false;
    if (isSetServerMetaData()) {
      if (!first) sb.append(", ");
      sb.append("serverMetaData:");
      if (this.serverMetaData == null) {
        sb.append("null");
      } else {
        sb.append(this.serverMetaData);
      }
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetTierId()) {
      if (!first) sb.append(", ");
      sb.append("tierId:");
      if (this.tierId == null) {
        sb.append("null");
      } else {
        sb.append(this.tierId);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentInfoStandardScheme getScheme() {
      return new TAgentInfoStandardScheme();
    }
  }

  private static class TAgentInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAgentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AGENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentVersion = iprot.readString();
              struct.setAgentVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vmVersion = iprot.readString();
              struct.setVmVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VM_ARGUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vmArguments = iprot.readString();
              struct.setVmArgumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osName = iprot.readString();
              struct.setOsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestamp = iprot.readI64();
              struct.setStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SERVER_META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.serverMetaData = new java.util.ArrayList<TServerMetaData>(_list10.size);
                TServerMetaData _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new TServerMetaData();
                  _elem11.read(iprot);
                  struct.serverMetaData.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setServerMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tierId = iprot.readString();
              struct.setTierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.agentVersion != null) {
        oprot.writeFieldBegin(AGENT_VERSION_FIELD_DESC);
        oprot.writeString(struct.agentVersion);
        oprot.writeFieldEnd();
      }
      if (struct.vmVersion != null) {
        oprot.writeFieldBegin(VM_VERSION_FIELD_DESC);
        oprot.writeString(struct.vmVersion);
        oprot.writeFieldEnd();
      }
      if (struct.vmArguments != null) {
        oprot.writeFieldBegin(VM_ARGUMENTS_FIELD_DESC);
        oprot.writeString(struct.vmArguments);
        oprot.writeFieldEnd();
      }
      if (struct.osName != null) {
        oprot.writeFieldBegin(OS_NAME_FIELD_DESC);
        oprot.writeString(struct.osName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.startTimestamp);
      oprot.writeFieldEnd();
      if (struct.serverMetaData != null) {
        if (struct.isSetServerMetaData()) {
          oprot.writeFieldBegin(SERVER_META_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serverMetaData.size()));
            for (TServerMetaData _iter13 : struct.serverMetaData)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tierId != null) {
        if (struct.isSetTierId()) {
          oprot.writeFieldBegin(TIER_ID_FIELD_DESC);
          oprot.writeString(struct.tierId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentInfoTupleScheme getScheme() {
      return new TAgentInfoTupleScheme();
    }
  }

  private static class TAgentInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAgentInfo> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHostname()) {
        optionals.set(0);
      }
      if (struct.isSetIp()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetAgentVersion()) {
        optionals.set(3);
      }
      if (struct.isSetVmVersion()) {
        optionals.set(4);
      }
      if (struct.isSetVmArguments()) {
        optionals.set(5);
      }
      if (struct.isSetOsName()) {
        optionals.set(6);
      }
      if (struct.isSetStartTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetServerMetaData()) {
        optionals.set(8);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(9);
      }
      if (struct.isSetTierId()) {
        optionals.set(10);
      }
      if (struct.isSetAppId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAgentVersion()) {
        oprot.writeString(struct.agentVersion);
      }
      if (struct.isSetVmVersion()) {
        oprot.writeString(struct.vmVersion);
      }
      if (struct.isSetVmArguments()) {
        oprot.writeString(struct.vmArguments);
      }
      if (struct.isSetOsName()) {
        oprot.writeString(struct.osName);
      }
      if (struct.isSetStartTimestamp()) {
        oprot.writeI64(struct.startTimestamp);
      }
      if (struct.isSetServerMetaData()) {
        {
          oprot.writeI32(struct.serverMetaData.size());
          for (TServerMetaData _iter14 : struct.serverMetaData)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetTierId()) {
        oprot.writeString(struct.tierId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.agentVersion = iprot.readString();
        struct.setAgentVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vmVersion = iprot.readString();
        struct.setVmVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vmArguments = iprot.readString();
        struct.setVmArgumentsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.osName = iprot.readString();
        struct.setOsNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startTimestamp = iprot.readI64();
        struct.setStartTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serverMetaData = new java.util.ArrayList<TServerMetaData>(_list15.size);
          TServerMetaData _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new TServerMetaData();
            _elem16.read(iprot);
            struct.serverMetaData.add(_elem16);
          }
        }
        struct.setServerMetaDataIsSet(true);
      }
      if (incoming.get(9)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tierId = iprot.readString();
        struct.setTierIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

