/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-01")
public class TJvmMemoryDetail implements org.apache.thrift.TBase<TJvmMemoryDetail, TJvmMemoryDetail._Fields>, java.io.Serializable, Cloneable, Comparable<TJvmMemoryDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJvmMemoryDetail");

  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("manager", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USED_FIELD_DESC = new org.apache.thrift.protocol.TField("used", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("committed", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AREA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaType", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJvmMemoryDetailStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJvmMemoryDetailTupleSchemeFactory();

  public String area; // required
  public String manager; // required
  public long used; // required
  public long committed; // required
  public long max; // required
  public String areaType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AREA((short)1, "area"),
    MANAGER((short)2, "manager"),
    USED((short)3, "used"),
    COMMITTED((short)4, "committed"),
    MAX((short)5, "max"),
    AREA_TYPE((short)6, "areaType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AREA
          return AREA;
        case 2: // MANAGER
          return MANAGER;
        case 3: // USED
          return USED;
        case 4: // COMMITTED
          return COMMITTED;
        case 5: // MAX
          return MAX;
        case 6: // AREA_TYPE
          return AREA_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USED_ISSET_ID = 0;
  private static final int __COMMITTED_ISSET_ID = 1;
  private static final int __MAX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGER, new org.apache.thrift.meta_data.FieldMetaData("manager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED, new org.apache.thrift.meta_data.FieldMetaData("used", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("committed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AREA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("areaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJvmMemoryDetail.class, metaDataMap);
  }

  public TJvmMemoryDetail() {
  }

  public TJvmMemoryDetail(
    String area,
    String manager,
    long used,
    long committed,
    long max,
    String areaType)
  {
    this();
    this.area = area;
    this.manager = manager;
    this.used = used;
    setUsedIsSet(true);
    this.committed = committed;
    setCommittedIsSet(true);
    this.max = max;
    setMaxIsSet(true);
    this.areaType = areaType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJvmMemoryDetail(TJvmMemoryDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetArea()) {
      this.area = other.area;
    }
    if (other.isSetManager()) {
      this.manager = other.manager;
    }
    this.used = other.used;
    this.committed = other.committed;
    this.max = other.max;
    if (other.isSetAreaType()) {
      this.areaType = other.areaType;
    }
  }

  public TJvmMemoryDetail deepCopy() {
    return new TJvmMemoryDetail(this);
  }

  public void clear() {
    this.area = null;
    this.manager = null;
    setUsedIsSet(false);
    this.used = 0;
    setCommittedIsSet(false);
    this.committed = 0;
    setMaxIsSet(false);
    this.max = 0;
    this.areaType = null;
  }

  public String getArea() {
    return this.area;
  }

  public TJvmMemoryDetail setArea(String area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public String getManager() {
    return this.manager;
  }

  public TJvmMemoryDetail setManager(String manager) {
    this.manager = manager;
    return this;
  }

  public void unsetManager() {
    this.manager = null;
  }

  /** Returns true if field manager is set (has been assigned a value) and false otherwise */
  public boolean isSetManager() {
    return this.manager != null;
  }

  public void setManagerIsSet(boolean value) {
    if (!value) {
      this.manager = null;
    }
  }

  public long getUsed() {
    return this.used;
  }

  public TJvmMemoryDetail setUsed(long used) {
    this.used = used;
    setUsedIsSet(true);
    return this;
  }

  public void unsetUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USED_ISSET_ID);
  }

  /** Returns true if field used is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USED_ISSET_ID);
  }

  public void setUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USED_ISSET_ID, value);
  }

  public long getCommitted() {
    return this.committed;
  }

  public TJvmMemoryDetail setCommitted(long committed) {
    this.committed = committed;
    setCommittedIsSet(true);
    return this;
  }

  public void unsetCommitted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMITTED_ISSET_ID);
  }

  /** Returns true if field committed is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMITTED_ISSET_ID);
  }

  public void setCommittedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMITTED_ISSET_ID, value);
  }

  public long getMax() {
    return this.max;
  }

  public TJvmMemoryDetail setMax(long max) {
    this.max = max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public String getAreaType() {
    return this.areaType;
  }

  public TJvmMemoryDetail setAreaType(String areaType) {
    this.areaType = areaType;
    return this;
  }

  public void unsetAreaType() {
    this.areaType = null;
  }

  /** Returns true if field areaType is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaType() {
    return this.areaType != null;
  }

  public void setAreaTypeIsSet(boolean value) {
    if (!value) {
      this.areaType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((String)value);
      }
      break;

    case MANAGER:
      if (value == null) {
        unsetManager();
      } else {
        setManager((String)value);
      }
      break;

    case USED:
      if (value == null) {
        unsetUsed();
      } else {
        setUsed((Long)value);
      }
      break;

    case COMMITTED:
      if (value == null) {
        unsetCommitted();
      } else {
        setCommitted((Long)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Long)value);
      }
      break;

    case AREA_TYPE:
      if (value == null) {
        unsetAreaType();
      } else {
        setAreaType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AREA:
      return getArea();

    case MANAGER:
      return getManager();

    case USED:
      return getUsed();

    case COMMITTED:
      return getCommitted();

    case MAX:
      return getMax();

    case AREA_TYPE:
      return getAreaType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AREA:
      return isSetArea();
    case MANAGER:
      return isSetManager();
    case USED:
      return isSetUsed();
    case COMMITTED:
      return isSetCommitted();
    case MAX:
      return isSetMax();
    case AREA_TYPE:
      return isSetAreaType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TJvmMemoryDetail)
      return this.equals((TJvmMemoryDetail)that);
    return false;
  }

  public boolean equals(TJvmMemoryDetail that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_manager = true && this.isSetManager();
    boolean that_present_manager = true && that.isSetManager();
    if (this_present_manager || that_present_manager) {
      if (!(this_present_manager && that_present_manager))
        return false;
      if (!this.manager.equals(that.manager))
        return false;
    }

    boolean this_present_used = true;
    boolean that_present_used = true;
    if (this_present_used || that_present_used) {
      if (!(this_present_used && that_present_used))
        return false;
      if (this.used != that.used)
        return false;
    }

    boolean this_present_committed = true;
    boolean that_present_committed = true;
    if (this_present_committed || that_present_committed) {
      if (!(this_present_committed && that_present_committed))
        return false;
      if (this.committed != that.committed)
        return false;
    }

    boolean this_present_max = true;
    boolean that_present_max = true;
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    boolean this_present_areaType = true && this.isSetAreaType();
    boolean that_present_areaType = true && that.isSetAreaType();
    if (this_present_areaType || that_present_areaType) {
      if (!(this_present_areaType && that_present_areaType))
        return false;
      if (!this.areaType.equals(that.areaType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetArea()) ? 131071 : 524287);
    if (isSetArea())
      hashCode = hashCode * 8191 + area.hashCode();

    hashCode = hashCode * 8191 + ((isSetManager()) ? 131071 : 524287);
    if (isSetManager())
      hashCode = hashCode * 8191 + manager.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(used);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(committed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max);

    hashCode = hashCode * 8191 + ((isSetAreaType()) ? 131071 : 524287);
    if (isSetAreaType())
      hashCode = hashCode * 8191 + areaType.hashCode();

    return hashCode;
  }

  public int compareTo(TJvmMemoryDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManager()).compareTo(other.isSetManager());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManager()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manager, other.manager);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed()).compareTo(other.isSetUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used, other.used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitted()).compareTo(other.isSetCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committed, other.committed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaType()).compareTo(other.isSetAreaType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaType, other.areaType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TJvmMemoryDetail(");
    boolean first = true;

    sb.append("area:");
    if (this.area == null) {
      sb.append("null");
    } else {
      sb.append(this.area);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manager:");
    if (this.manager == null) {
      sb.append("null");
    } else {
      sb.append(this.manager);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("used:");
    sb.append(this.used);
    first = false;
    if (!first) sb.append(", ");
    sb.append("committed:");
    sb.append(this.committed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    sb.append(this.max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaType:");
    if (this.areaType == null) {
      sb.append("null");
    } else {
      sb.append(this.areaType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJvmMemoryDetailStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJvmMemoryDetailStandardScheme getScheme() {
      return new TJvmMemoryDetailStandardScheme();
    }
  }

  private static class TJvmMemoryDetailStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJvmMemoryDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TJvmMemoryDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MANAGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manager = iprot.readString();
              struct.setManagerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.used = iprot.readI64();
              struct.setUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.committed = iprot.readI64();
              struct.setCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max = iprot.readI64();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AREA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaType = iprot.readString();
              struct.setAreaTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TJvmMemoryDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.area != null) {
        oprot.writeFieldBegin(AREA_FIELD_DESC);
        oprot.writeString(struct.area);
        oprot.writeFieldEnd();
      }
      if (struct.manager != null) {
        oprot.writeFieldBegin(MANAGER_FIELD_DESC);
        oprot.writeString(struct.manager);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USED_FIELD_DESC);
      oprot.writeI64(struct.used);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.committed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeI64(struct.max);
      oprot.writeFieldEnd();
      if (struct.areaType != null) {
        oprot.writeFieldBegin(AREA_TYPE_FIELD_DESC);
        oprot.writeString(struct.areaType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJvmMemoryDetailTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJvmMemoryDetailTupleScheme getScheme() {
      return new TJvmMemoryDetailTupleScheme();
    }
  }

  private static class TJvmMemoryDetailTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJvmMemoryDetail> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TJvmMemoryDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetArea()) {
        optionals.set(0);
      }
      if (struct.isSetManager()) {
        optionals.set(1);
      }
      if (struct.isSetUsed()) {
        optionals.set(2);
      }
      if (struct.isSetCommitted()) {
        optionals.set(3);
      }
      if (struct.isSetMax()) {
        optionals.set(4);
      }
      if (struct.isSetAreaType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetArea()) {
        oprot.writeString(struct.area);
      }
      if (struct.isSetManager()) {
        oprot.writeString(struct.manager);
      }
      if (struct.isSetUsed()) {
        oprot.writeI64(struct.used);
      }
      if (struct.isSetCommitted()) {
        oprot.writeI64(struct.committed);
      }
      if (struct.isSetMax()) {
        oprot.writeI64(struct.max);
      }
      if (struct.isSetAreaType()) {
        oprot.writeString(struct.areaType);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TJvmMemoryDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.area = iprot.readString();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.manager = iprot.readString();
        struct.setManagerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.used = iprot.readI64();
        struct.setUsedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.committed = iprot.readI64();
        struct.setCommittedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.max = iprot.readI64();
        struct.setMaxIsSet(true);
      }
      if (incoming.get(5)) {
        struct.areaType = iprot.readString();
        struct.setAreaTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

