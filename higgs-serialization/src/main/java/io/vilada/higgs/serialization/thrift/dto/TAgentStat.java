/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-22")
public class TAgentStat implements org.apache.thrift.TBase<TAgentStat, TAgentStat._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentStat");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COLLECT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("collectInterval", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LOADED_CLASS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loadedClassCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField UNLOADED_CLASS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("unloadedClassCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_THREAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalThreadCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ACTIVE_THREAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("activeThreadCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField GC_FIELD_DESC = new org.apache.thrift.protocol.TField("gc", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tierId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAgentStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAgentStatTupleSchemeFactory();

  public long timestamp; // required
  public long collectInterval; // required
  public long loadedClassCount; // optional
  public long unloadedClassCount; // optional
  public long totalThreadCount; // optional
  public long activeThreadCount; // optional
  public TJvmMemory memory; // optional
  public java.util.List<TJvmGc> gc; // optional
  public String instanceId; // optional
  public String tierId; // optional
  public String appId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    COLLECT_INTERVAL((short)2, "collectInterval"),
    LOADED_CLASS_COUNT((short)3, "loadedClassCount"),
    UNLOADED_CLASS_COUNT((short)4, "unloadedClassCount"),
    TOTAL_THREAD_COUNT((short)5, "totalThreadCount"),
    ACTIVE_THREAD_COUNT((short)6, "activeThreadCount"),
    MEMORY((short)7, "memory"),
    GC((short)8, "gc"),
    INSTANCE_ID((short)9, "instanceId"),
    TIER_ID((short)10, "tierId"),
    APP_ID((short)11, "appId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // COLLECT_INTERVAL
          return COLLECT_INTERVAL;
        case 3: // LOADED_CLASS_COUNT
          return LOADED_CLASS_COUNT;
        case 4: // UNLOADED_CLASS_COUNT
          return UNLOADED_CLASS_COUNT;
        case 5: // TOTAL_THREAD_COUNT
          return TOTAL_THREAD_COUNT;
        case 6: // ACTIVE_THREAD_COUNT
          return ACTIVE_THREAD_COUNT;
        case 7: // MEMORY
          return MEMORY;
        case 8: // GC
          return GC;
        case 9: // INSTANCE_ID
          return INSTANCE_ID;
        case 10: // TIER_ID
          return TIER_ID;
        case 11: // APP_ID
          return APP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __COLLECTINTERVAL_ISSET_ID = 1;
  private static final int __LOADEDCLASSCOUNT_ISSET_ID = 2;
  private static final int __UNLOADEDCLASSCOUNT_ISSET_ID = 3;
  private static final int __TOTALTHREADCOUNT_ISSET_ID = 4;
  private static final int __ACTIVETHREADCOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOADED_CLASS_COUNT,_Fields.UNLOADED_CLASS_COUNT,_Fields.TOTAL_THREAD_COUNT,_Fields.ACTIVE_THREAD_COUNT,_Fields.MEMORY,_Fields.GC,_Fields.INSTANCE_ID,_Fields.TIER_ID,_Fields.APP_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLLECT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("collectInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_CLASS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("loadedClassCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNLOADED_CLASS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("unloadedClassCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_THREAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalThreadCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_THREAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("activeThreadCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TJvmMemory")));
    tmpMap.put(_Fields.GC, new org.apache.thrift.meta_data.FieldMetaData("gc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TJvmGc"))));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER_ID, new org.apache.thrift.meta_data.FieldMetaData("tierId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentStat.class, metaDataMap);
  }

  public TAgentStat() {
  }

  public TAgentStat(
    long timestamp,
    long collectInterval)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.collectInterval = collectInterval;
    setCollectIntervalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentStat(TAgentStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    this.collectInterval = other.collectInterval;
    this.loadedClassCount = other.loadedClassCount;
    this.unloadedClassCount = other.unloadedClassCount;
    this.totalThreadCount = other.totalThreadCount;
    this.activeThreadCount = other.activeThreadCount;
    if (other.isSetMemory()) {
      this.memory = new TJvmMemory(other.memory);
    }
    if (other.isSetGc()) {
      java.util.List<TJvmGc> __this__gc = new java.util.ArrayList<TJvmGc>(other.gc.size());
      for (TJvmGc other_element : other.gc) {
        __this__gc.add(other_element);
      }
      this.gc = __this__gc;
    }
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetTierId()) {
      this.tierId = other.tierId;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
  }

  public TAgentStat deepCopy() {
    return new TAgentStat(this);
  }

  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    setCollectIntervalIsSet(false);
    this.collectInterval = 0;
    setLoadedClassCountIsSet(false);
    this.loadedClassCount = 0;
    setUnloadedClassCountIsSet(false);
    this.unloadedClassCount = 0;
    setTotalThreadCountIsSet(false);
    this.totalThreadCount = 0;
    setActiveThreadCountIsSet(false);
    this.activeThreadCount = 0;
    this.memory = null;
    this.gc = null;
    this.instanceId = null;
    this.tierId = null;
    this.appId = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public TAgentStat setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getCollectInterval() {
    return this.collectInterval;
  }

  public TAgentStat setCollectInterval(long collectInterval) {
    this.collectInterval = collectInterval;
    setCollectIntervalIsSet(true);
    return this;
  }

  public void unsetCollectInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  /** Returns true if field collectInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID);
  }

  public void setCollectIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTINTERVAL_ISSET_ID, value);
  }

  public long getLoadedClassCount() {
    return this.loadedClassCount;
  }

  public TAgentStat setLoadedClassCount(long loadedClassCount) {
    this.loadedClassCount = loadedClassCount;
    setLoadedClassCountIsSet(true);
    return this;
  }

  public void unsetLoadedClassCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADEDCLASSCOUNT_ISSET_ID);
  }

  /** Returns true if field loadedClassCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedClassCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADEDCLASSCOUNT_ISSET_ID);
  }

  public void setLoadedClassCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADEDCLASSCOUNT_ISSET_ID, value);
  }

  public long getUnloadedClassCount() {
    return this.unloadedClassCount;
  }

  public TAgentStat setUnloadedClassCount(long unloadedClassCount) {
    this.unloadedClassCount = unloadedClassCount;
    setUnloadedClassCountIsSet(true);
    return this;
  }

  public void unsetUnloadedClassCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNLOADEDCLASSCOUNT_ISSET_ID);
  }

  /** Returns true if field unloadedClassCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnloadedClassCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNLOADEDCLASSCOUNT_ISSET_ID);
  }

  public void setUnloadedClassCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNLOADEDCLASSCOUNT_ISSET_ID, value);
  }

  public long getTotalThreadCount() {
    return this.totalThreadCount;
  }

  public TAgentStat setTotalThreadCount(long totalThreadCount) {
    this.totalThreadCount = totalThreadCount;
    setTotalThreadCountIsSet(true);
    return this;
  }

  public void unsetTotalThreadCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALTHREADCOUNT_ISSET_ID);
  }

  /** Returns true if field totalThreadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalThreadCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALTHREADCOUNT_ISSET_ID);
  }

  public void setTotalThreadCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALTHREADCOUNT_ISSET_ID, value);
  }

  public long getActiveThreadCount() {
    return this.activeThreadCount;
  }

  public TAgentStat setActiveThreadCount(long activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
    setActiveThreadCountIsSet(true);
    return this;
  }

  public void unsetActiveThreadCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVETHREADCOUNT_ISSET_ID);
  }

  /** Returns true if field activeThreadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveThreadCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVETHREADCOUNT_ISSET_ID);
  }

  public void setActiveThreadCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVETHREADCOUNT_ISSET_ID, value);
  }

  public TJvmMemory getMemory() {
    return this.memory;
  }

  public TAgentStat setMemory(TJvmMemory memory) {
    this.memory = memory;
    return this;
  }

  public void unsetMemory() {
    this.memory = null;
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return this.memory != null;
  }

  public void setMemoryIsSet(boolean value) {
    if (!value) {
      this.memory = null;
    }
  }

  public int getGcSize() {
    return (this.gc == null) ? 0 : this.gc.size();
  }

  public java.util.Iterator<TJvmGc> getGcIterator() {
    return (this.gc == null) ? null : this.gc.iterator();
  }

  public void addToGc(TJvmGc elem) {
    if (this.gc == null) {
      this.gc = new java.util.ArrayList<TJvmGc>();
    }
    this.gc.add(elem);
  }

  public java.util.List<TJvmGc> getGc() {
    return this.gc;
  }

  public TAgentStat setGc(java.util.List<TJvmGc> gc) {
    this.gc = gc;
    return this;
  }

  public void unsetGc() {
    this.gc = null;
  }

  /** Returns true if field gc is set (has been assigned a value) and false otherwise */
  public boolean isSetGc() {
    return this.gc != null;
  }

  public void setGcIsSet(boolean value) {
    if (!value) {
      this.gc = null;
    }
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public TAgentStat setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getTierId() {
    return this.tierId;
  }

  public TAgentStat setTierId(String tierId) {
    this.tierId = tierId;
    return this;
  }

  public void unsetTierId() {
    this.tierId = null;
  }

  /** Returns true if field tierId is set (has been assigned a value) and false otherwise */
  public boolean isSetTierId() {
    return this.tierId != null;
  }

  public void setTierIdIsSet(boolean value) {
    if (!value) {
      this.tierId = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public TAgentStat setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case COLLECT_INTERVAL:
      if (value == null) {
        unsetCollectInterval();
      } else {
        setCollectInterval((Long)value);
      }
      break;

    case LOADED_CLASS_COUNT:
      if (value == null) {
        unsetLoadedClassCount();
      } else {
        setLoadedClassCount((Long)value);
      }
      break;

    case UNLOADED_CLASS_COUNT:
      if (value == null) {
        unsetUnloadedClassCount();
      } else {
        setUnloadedClassCount((Long)value);
      }
      break;

    case TOTAL_THREAD_COUNT:
      if (value == null) {
        unsetTotalThreadCount();
      } else {
        setTotalThreadCount((Long)value);
      }
      break;

    case ACTIVE_THREAD_COUNT:
      if (value == null) {
        unsetActiveThreadCount();
      } else {
        setActiveThreadCount((Long)value);
      }
      break;

    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((TJvmMemory)value);
      }
      break;

    case GC:
      if (value == null) {
        unsetGc();
      } else {
        setGc((java.util.List<TJvmGc>)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case TIER_ID:
      if (value == null) {
        unsetTierId();
      } else {
        setTierId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case COLLECT_INTERVAL:
      return getCollectInterval();

    case LOADED_CLASS_COUNT:
      return getLoadedClassCount();

    case UNLOADED_CLASS_COUNT:
      return getUnloadedClassCount();

    case TOTAL_THREAD_COUNT:
      return getTotalThreadCount();

    case ACTIVE_THREAD_COUNT:
      return getActiveThreadCount();

    case MEMORY:
      return getMemory();

    case GC:
      return getGc();

    case INSTANCE_ID:
      return getInstanceId();

    case TIER_ID:
      return getTierId();

    case APP_ID:
      return getAppId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case COLLECT_INTERVAL:
      return isSetCollectInterval();
    case LOADED_CLASS_COUNT:
      return isSetLoadedClassCount();
    case UNLOADED_CLASS_COUNT:
      return isSetUnloadedClassCount();
    case TOTAL_THREAD_COUNT:
      return isSetTotalThreadCount();
    case ACTIVE_THREAD_COUNT:
      return isSetActiveThreadCount();
    case MEMORY:
      return isSetMemory();
    case GC:
      return isSetGc();
    case INSTANCE_ID:
      return isSetInstanceId();
    case TIER_ID:
      return isSetTierId();
    case APP_ID:
      return isSetAppId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAgentStat)
      return this.equals((TAgentStat)that);
    return false;
  }

  public boolean equals(TAgentStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_collectInterval = true;
    boolean that_present_collectInterval = true;
    if (this_present_collectInterval || that_present_collectInterval) {
      if (!(this_present_collectInterval && that_present_collectInterval))
        return false;
      if (this.collectInterval != that.collectInterval)
        return false;
    }

    boolean this_present_loadedClassCount = true && this.isSetLoadedClassCount();
    boolean that_present_loadedClassCount = true && that.isSetLoadedClassCount();
    if (this_present_loadedClassCount || that_present_loadedClassCount) {
      if (!(this_present_loadedClassCount && that_present_loadedClassCount))
        return false;
      if (this.loadedClassCount != that.loadedClassCount)
        return false;
    }

    boolean this_present_unloadedClassCount = true && this.isSetUnloadedClassCount();
    boolean that_present_unloadedClassCount = true && that.isSetUnloadedClassCount();
    if (this_present_unloadedClassCount || that_present_unloadedClassCount) {
      if (!(this_present_unloadedClassCount && that_present_unloadedClassCount))
        return false;
      if (this.unloadedClassCount != that.unloadedClassCount)
        return false;
    }

    boolean this_present_totalThreadCount = true && this.isSetTotalThreadCount();
    boolean that_present_totalThreadCount = true && that.isSetTotalThreadCount();
    if (this_present_totalThreadCount || that_present_totalThreadCount) {
      if (!(this_present_totalThreadCount && that_present_totalThreadCount))
        return false;
      if (this.totalThreadCount != that.totalThreadCount)
        return false;
    }

    boolean this_present_activeThreadCount = true && this.isSetActiveThreadCount();
    boolean that_present_activeThreadCount = true && that.isSetActiveThreadCount();
    if (this_present_activeThreadCount || that_present_activeThreadCount) {
      if (!(this_present_activeThreadCount && that_present_activeThreadCount))
        return false;
      if (this.activeThreadCount != that.activeThreadCount)
        return false;
    }

    boolean this_present_memory = true && this.isSetMemory();
    boolean that_present_memory = true && that.isSetMemory();
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (!this.memory.equals(that.memory))
        return false;
    }

    boolean this_present_gc = true && this.isSetGc();
    boolean that_present_gc = true && that.isSetGc();
    if (this_present_gc || that_present_gc) {
      if (!(this_present_gc && that_present_gc))
        return false;
      if (!this.gc.equals(that.gc))
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_tierId = true && this.isSetTierId();
    boolean that_present_tierId = true && that.isSetTierId();
    if (this_present_tierId || that_present_tierId) {
      if (!(this_present_tierId && that_present_tierId))
        return false;
      if (!this.tierId.equals(that.tierId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(collectInterval);

    hashCode = hashCode * 8191 + ((isSetLoadedClassCount()) ? 131071 : 524287);
    if (isSetLoadedClassCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadedClassCount);

    hashCode = hashCode * 8191 + ((isSetUnloadedClassCount()) ? 131071 : 524287);
    if (isSetUnloadedClassCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unloadedClassCount);

    hashCode = hashCode * 8191 + ((isSetTotalThreadCount()) ? 131071 : 524287);
    if (isSetTotalThreadCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalThreadCount);

    hashCode = hashCode * 8191 + ((isSetActiveThreadCount()) ? 131071 : 524287);
    if (isSetActiveThreadCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(activeThreadCount);

    hashCode = hashCode * 8191 + ((isSetMemory()) ? 131071 : 524287);
    if (isSetMemory())
      hashCode = hashCode * 8191 + memory.hashCode();

    hashCode = hashCode * 8191 + ((isSetGc()) ? 131071 : 524287);
    if (isSetGc())
      hashCode = hashCode * 8191 + gc.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
    if (isSetInstanceId())
      hashCode = hashCode * 8191 + instanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTierId()) ? 131071 : 524287);
    if (isSetTierId())
      hashCode = hashCode * 8191 + tierId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    return hashCode;
  }

  public int compareTo(TAgentStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectInterval()).compareTo(other.isSetCollectInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectInterval, other.collectInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoadedClassCount()).compareTo(other.isSetLoadedClassCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedClassCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadedClassCount, other.loadedClassCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnloadedClassCount()).compareTo(other.isSetUnloadedClassCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnloadedClassCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unloadedClassCount, other.unloadedClassCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalThreadCount()).compareTo(other.isSetTotalThreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalThreadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalThreadCount, other.totalThreadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveThreadCount()).compareTo(other.isSetActiveThreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveThreadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeThreadCount, other.activeThreadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc()).compareTo(other.isSetGc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc, other.gc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTierId()).compareTo(other.isSetTierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierId, other.tierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAgentStat(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectInterval:");
    sb.append(this.collectInterval);
    first = false;
    if (isSetLoadedClassCount()) {
      if (!first) sb.append(", ");
      sb.append("loadedClassCount:");
      sb.append(this.loadedClassCount);
      first = false;
    }
    if (isSetUnloadedClassCount()) {
      if (!first) sb.append(", ");
      sb.append("unloadedClassCount:");
      sb.append(this.unloadedClassCount);
      first = false;
    }
    if (isSetTotalThreadCount()) {
      if (!first) sb.append(", ");
      sb.append("totalThreadCount:");
      sb.append(this.totalThreadCount);
      first = false;
    }
    if (isSetActiveThreadCount()) {
      if (!first) sb.append(", ");
      sb.append("activeThreadCount:");
      sb.append(this.activeThreadCount);
      first = false;
    }
    if (isSetMemory()) {
      if (!first) sb.append(", ");
      sb.append("memory:");
      if (this.memory == null) {
        sb.append("null");
      } else {
        sb.append(this.memory);
      }
      first = false;
    }
    if (isSetGc()) {
      if (!first) sb.append(", ");
      sb.append("gc:");
      if (this.gc == null) {
        sb.append("null");
      } else {
        sb.append(this.gc);
      }
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetTierId()) {
      if (!first) sb.append(", ");
      sb.append("tierId:");
      if (this.tierId == null) {
        sb.append("null");
      } else {
        sb.append(this.tierId);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentStatStandardScheme getScheme() {
      return new TAgentStatStandardScheme();
    }
  }

  private static class TAgentStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAgentStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLLECT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.collectInterval = iprot.readI64();
              struct.setCollectIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOADED_CLASS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadedClassCount = iprot.readI64();
              struct.setLoadedClassCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNLOADED_CLASS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unloadedClassCount = iprot.readI64();
              struct.setUnloadedClassCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_THREAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalThreadCount = iprot.readI64();
              struct.setTotalThreadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTIVE_THREAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeThreadCount = iprot.readI64();
              struct.setActiveThreadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memory = new TJvmMemory();
              struct.memory.read(iprot);
              struct.setMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.gc = new java.util.ArrayList<TJvmGc>(_list8.size);
                TJvmGc _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TJvmGc();
                  _elem9.read(iprot);
                  struct.gc.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setGcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tierId = iprot.readString();
              struct.setTierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECT_INTERVAL_FIELD_DESC);
      oprot.writeI64(struct.collectInterval);
      oprot.writeFieldEnd();
      if (struct.isSetLoadedClassCount()) {
        oprot.writeFieldBegin(LOADED_CLASS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.loadedClassCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnloadedClassCount()) {
        oprot.writeFieldBegin(UNLOADED_CLASS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.unloadedClassCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalThreadCount()) {
        oprot.writeFieldBegin(TOTAL_THREAD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.totalThreadCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveThreadCount()) {
        oprot.writeFieldBegin(ACTIVE_THREAD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.activeThreadCount);
        oprot.writeFieldEnd();
      }
      if (struct.memory != null) {
        if (struct.isSetMemory()) {
          oprot.writeFieldBegin(MEMORY_FIELD_DESC);
          struct.memory.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gc != null) {
        if (struct.isSetGc()) {
          oprot.writeFieldBegin(GC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.gc.size()));
            for (TJvmGc _iter11 : struct.gc)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tierId != null) {
        if (struct.isSetTierId()) {
          oprot.writeFieldBegin(TIER_ID_FIELD_DESC);
          oprot.writeString(struct.tierId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentStatTupleScheme getScheme() {
      return new TAgentStatTupleScheme();
    }
  }

  private static class TAgentStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAgentStat> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetCollectInterval()) {
        optionals.set(1);
      }
      if (struct.isSetLoadedClassCount()) {
        optionals.set(2);
      }
      if (struct.isSetUnloadedClassCount()) {
        optionals.set(3);
      }
      if (struct.isSetTotalThreadCount()) {
        optionals.set(4);
      }
      if (struct.isSetActiveThreadCount()) {
        optionals.set(5);
      }
      if (struct.isSetMemory()) {
        optionals.set(6);
      }
      if (struct.isSetGc()) {
        optionals.set(7);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(8);
      }
      if (struct.isSetTierId()) {
        optionals.set(9);
      }
      if (struct.isSetAppId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetCollectInterval()) {
        oprot.writeI64(struct.collectInterval);
      }
      if (struct.isSetLoadedClassCount()) {
        oprot.writeI64(struct.loadedClassCount);
      }
      if (struct.isSetUnloadedClassCount()) {
        oprot.writeI64(struct.unloadedClassCount);
      }
      if (struct.isSetTotalThreadCount()) {
        oprot.writeI64(struct.totalThreadCount);
      }
      if (struct.isSetActiveThreadCount()) {
        oprot.writeI64(struct.activeThreadCount);
      }
      if (struct.isSetMemory()) {
        struct.memory.write(oprot);
      }
      if (struct.isSetGc()) {
        {
          oprot.writeI32(struct.gc.size());
          for (TJvmGc _iter12 : struct.gc)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetTierId()) {
        oprot.writeString(struct.tierId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.collectInterval = iprot.readI64();
        struct.setCollectIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loadedClassCount = iprot.readI64();
        struct.setLoadedClassCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unloadedClassCount = iprot.readI64();
        struct.setUnloadedClassCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalThreadCount = iprot.readI64();
        struct.setTotalThreadCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.activeThreadCount = iprot.readI64();
        struct.setActiveThreadCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.memory = new TJvmMemory();
        struct.memory.read(iprot);
        struct.setMemoryIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.gc = new java.util.ArrayList<TJvmGc>(_list13.size);
          TJvmGc _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TJvmGc();
            _elem14.read(iprot);
            struct.gc.add(_elem14);
          }
        }
        struct.setGcIsSet(true);
      }
      if (incoming.get(8)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tierId = iprot.readString();
        struct.setTierIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

