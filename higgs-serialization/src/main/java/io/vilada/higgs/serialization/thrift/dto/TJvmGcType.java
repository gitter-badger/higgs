/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;


import org.apache.thrift.TEnum;

public enum TJvmGcType implements TEnum {
  UNKNOWN(0, TJvmGCArea.UNKNOWN, "unknown"),
  SERIAL_NEW(1, TJvmGCArea.NEW, "copy"),
  SERIAL_OLD(2, TJvmGCArea.OLD, "marksweepcompact"),
  PARNEW_NEW(3, TJvmGCArea.NEW, "parnew"),
  PARALLEL_SCAVENGE_NEW(4, TJvmGCArea.NEW, "ps-scavenge"),
  PARALLEL_SCAVENGE_OLD(5, TJvmGCArea.OLD, "ps-marksweep"),
  CMS_OLD(6, TJvmGCArea.OLD, "concurrentmarksweep"),
  G1_NEW(7, TJvmGCArea.NEW, "g1-young"),
  G1_OLD(8, TJvmGCArea.OLD, "g1-mixed"),
  UNKNOWN_NEW(9, TJvmGCArea.NEW, "young"),
  UNKNOWN_OLD(10, TJvmGCArea.OLD, "old");

  private final int value;

  private TJvmGCArea area;

  private String algorithm;

  private TJvmGcType(int value, TJvmGCArea area, String algorithm) {
    this.value = value;
    this.area = area;
    this.algorithm = algorithm;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  public TJvmGCArea getArea() {
    return area;
  }

  public String getAlgorithm() {
    return algorithm;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TJvmGcType findByValue(int value) { 
    switch (value) {
        case 1:
            return SERIAL_NEW;
        case 2:
            return SERIAL_OLD;
        case 3:
            return PARNEW_NEW;
        case 4:
            return PARALLEL_SCAVENGE_NEW;
        case 5:
            return PARALLEL_SCAVENGE_OLD;
        case 6:
            return CMS_OLD;
        case 7:
            return G1_NEW;
        case 8:
            return G1_OLD;
        case 9:
            return UNKNOWN_NEW;
        case 10:
            return UNKNOWN_OLD;
      default:
        return UNKNOWN;
    }
  }
}
