/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-23")
public class TThreadDumpRequest implements org.apache.thrift.TBase<TThreadDumpRequest, TThreadDumpRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TThreadDumpRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TThreadDumpRequest");

  private static final org.apache.thrift.protocol.TField AGENT_THREAD_DUMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentThreadDumpId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AGENT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("agentToken", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DUMP_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("dumpInterval", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TThreadDumpRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TThreadDumpRequestTupleSchemeFactory();

  public long agentThreadDumpId; // required
  public String agentToken; // required
  public long dumpInterval; // required
  public TThreadDumpStatus status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_THREAD_DUMP_ID((short)1, "agentThreadDumpId"),
    AGENT_TOKEN((short)2, "agentToken"),
    DUMP_INTERVAL((short)3, "dumpInterval"),
    STATUS((short)4, "status");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_THREAD_DUMP_ID
          return AGENT_THREAD_DUMP_ID;
        case 2: // AGENT_TOKEN
          return AGENT_TOKEN;
        case 3: // DUMP_INTERVAL
          return DUMP_INTERVAL;
        case 4: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGENTTHREADDUMPID_ISSET_ID = 0;
  private static final int __DUMPINTERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_THREAD_DUMP_ID, new org.apache.thrift.meta_data.FieldMetaData("agentThreadDumpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGENT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("agentToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUMP_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("dumpInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "TThreadDumpStatus")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TThreadDumpRequest.class, metaDataMap);
  }

  public TThreadDumpRequest() {
  }

  public TThreadDumpRequest(
    long agentThreadDumpId,
    String agentToken,
    long dumpInterval,
    TThreadDumpStatus status)
  {
    this();
    this.agentThreadDumpId = agentThreadDumpId;
    setAgentThreadDumpIdIsSet(true);
    this.agentToken = agentToken;
    this.dumpInterval = dumpInterval;
    setDumpIntervalIsSet(true);
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TThreadDumpRequest(TThreadDumpRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.agentThreadDumpId = other.agentThreadDumpId;
    if (other.isSetAgentToken()) {
      this.agentToken = other.agentToken;
    }
    this.dumpInterval = other.dumpInterval;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public TThreadDumpRequest deepCopy() {
    return new TThreadDumpRequest(this);
  }


  public void clear() {
    setAgentThreadDumpIdIsSet(false);
    this.agentThreadDumpId = 0;
    this.agentToken = null;
    setDumpIntervalIsSet(false);
    this.dumpInterval = 0;
    this.status = null;
  }

  public long getAgentThreadDumpId() {
    return this.agentThreadDumpId;
  }

  public TThreadDumpRequest setAgentThreadDumpId(long agentThreadDumpId) {
    this.agentThreadDumpId = agentThreadDumpId;
    setAgentThreadDumpIdIsSet(true);
    return this;
  }

  public void unsetAgentThreadDumpId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGENTTHREADDUMPID_ISSET_ID);
  }

  /** Returns true if field agentThreadDumpId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentThreadDumpId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGENTTHREADDUMPID_ISSET_ID);
  }

  public void setAgentThreadDumpIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGENTTHREADDUMPID_ISSET_ID, value);
  }

  public String getAgentToken() {
    return this.agentToken;
  }

  public TThreadDumpRequest setAgentToken(String agentToken) {
    this.agentToken = agentToken;
    return this;
  }

  public void unsetAgentToken() {
    this.agentToken = null;
  }

  /** Returns true if field agentToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentToken() {
    return this.agentToken != null;
  }

  public void setAgentTokenIsSet(boolean value) {
    if (!value) {
      this.agentToken = null;
    }
  }

  public long getDumpInterval() {
    return this.dumpInterval;
  }

  public TThreadDumpRequest setDumpInterval(long dumpInterval) {
    this.dumpInterval = dumpInterval;
    setDumpIntervalIsSet(true);
    return this;
  }

  public void unsetDumpInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DUMPINTERVAL_ISSET_ID);
  }

  /** Returns true if field dumpInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetDumpInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DUMPINTERVAL_ISSET_ID);
  }

  public void setDumpIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DUMPINTERVAL_ISSET_ID, value);
  }

  public TThreadDumpStatus getStatus() {
    return this.status;
  }

  public TThreadDumpRequest setStatus(TThreadDumpStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_THREAD_DUMP_ID:
      if (value == null) {
        unsetAgentThreadDumpId();
      } else {
        setAgentThreadDumpId((Long)value);
      }
      break;

    case AGENT_TOKEN:
      if (value == null) {
        unsetAgentToken();
      } else {
        setAgentToken((String)value);
      }
      break;

    case DUMP_INTERVAL:
      if (value == null) {
        unsetDumpInterval();
      } else {
        setDumpInterval((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TThreadDumpStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_THREAD_DUMP_ID:
      return getAgentThreadDumpId();

    case AGENT_TOKEN:
      return getAgentToken();

    case DUMP_INTERVAL:
      return getDumpInterval();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_THREAD_DUMP_ID:
      return isSetAgentThreadDumpId();
    case AGENT_TOKEN:
      return isSetAgentToken();
    case DUMP_INTERVAL:
      return isSetDumpInterval();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }


  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TThreadDumpRequest)
      return this.equals((TThreadDumpRequest)that);
    return false;
  }

  public boolean equals(TThreadDumpRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agentThreadDumpId = true;
    boolean that_present_agentThreadDumpId = true;
    if (this_present_agentThreadDumpId || that_present_agentThreadDumpId) {
      if (!(this_present_agentThreadDumpId && that_present_agentThreadDumpId))
        return false;
      if (this.agentThreadDumpId != that.agentThreadDumpId)
        return false;
    }

    boolean this_present_agentToken = true && this.isSetAgentToken();
    boolean that_present_agentToken = true && that.isSetAgentToken();
    if (this_present_agentToken || that_present_agentToken) {
      if (!(this_present_agentToken && that_present_agentToken))
        return false;
      if (!this.agentToken.equals(that.agentToken))
        return false;
    }

    boolean this_present_dumpInterval = true;
    boolean that_present_dumpInterval = true;
    if (this_present_dumpInterval || that_present_dumpInterval) {
      if (!(this_present_dumpInterval && that_present_dumpInterval))
        return false;
      if (this.dumpInterval != that.dumpInterval)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }


  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(agentThreadDumpId);

    hashCode = hashCode * 8191 + ((isSetAgentToken()) ? 131071 : 524287);
    if (isSetAgentToken())
      hashCode = hashCode * 8191 + agentToken.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dumpInterval);

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    return hashCode;
  }


  public int compareTo(TThreadDumpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentThreadDumpId()).compareTo(other.isSetAgentThreadDumpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentThreadDumpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentThreadDumpId, other.agentThreadDumpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentToken()).compareTo(other.isSetAgentToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentToken, other.agentToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDumpInterval()).compareTo(other.isSetDumpInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDumpInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dumpInterval, other.dumpInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }


  public String toString() {
    StringBuilder sb = new StringBuilder("TThreadDumpRequest(");
    boolean first = true;

    sb.append("agentThreadDumpId:");
    sb.append(this.agentThreadDumpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentToken:");
    if (this.agentToken == null) {
      sb.append("null");
    } else {
      sb.append(this.agentToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dumpInterval:");
    sb.append(this.dumpInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TThreadDumpRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TThreadDumpRequestStandardScheme getScheme() {
      return new TThreadDumpRequestStandardScheme();
    }
  }

  private static class TThreadDumpRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TThreadDumpRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TThreadDumpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_THREAD_DUMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.agentThreadDumpId = iprot.readI64();
              struct.setAgentThreadDumpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGENT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentToken = iprot.readString();
              struct.setAgentTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DUMP_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dumpInterval = iprot.readI64();
              struct.setDumpIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = TThreadDumpStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TThreadDumpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AGENT_THREAD_DUMP_ID_FIELD_DESC);
      oprot.writeI64(struct.agentThreadDumpId);
      oprot.writeFieldEnd();
      if (struct.agentToken != null) {
        oprot.writeFieldBegin(AGENT_TOKEN_FIELD_DESC);
        oprot.writeString(struct.agentToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DUMP_INTERVAL_FIELD_DESC);
      oprot.writeI64(struct.dumpInterval);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TThreadDumpRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TThreadDumpRequestTupleScheme getScheme() {
      return new TThreadDumpRequestTupleScheme();
    }
  }

  private static class TThreadDumpRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TThreadDumpRequest> {


    public void write(org.apache.thrift.protocol.TProtocol prot, TThreadDumpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAgentThreadDumpId()) {
        optionals.set(0);
      }
      if (struct.isSetAgentToken()) {
        optionals.set(1);
      }
      if (struct.isSetDumpInterval()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAgentThreadDumpId()) {
        oprot.writeI64(struct.agentThreadDumpId);
      }
      if (struct.isSetAgentToken()) {
        oprot.writeString(struct.agentToken);
      }
      if (struct.isSetDumpInterval()) {
        oprot.writeI64(struct.dumpInterval);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
    }


    public void read(org.apache.thrift.protocol.TProtocol prot, TThreadDumpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.agentThreadDumpId = iprot.readI64();
        struct.setAgentThreadDumpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agentToken = iprot.readString();
        struct.setAgentTokenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dumpInterval = iprot.readI64();
        struct.setDumpIntervalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = TThreadDumpStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

