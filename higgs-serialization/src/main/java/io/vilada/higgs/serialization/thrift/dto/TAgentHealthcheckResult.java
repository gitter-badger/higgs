/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-24")
public class TAgentHealthcheckResult implements org.apache.thrift.TBase<TAgentHealthcheckResult, TAgentHealthcheckResult._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentHealthcheckResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentHealthcheckResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONFIG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("configVersion", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AGENT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("agentToken", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAgentHealthcheckResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAgentHealthcheckResultTupleSchemeFactory();

  public TAgentStatus status; // required
  public int configVersion; // required
  public String agentToken; // optional
  public String message; // optional
  public java.util.Map<String,String> data; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    CONFIG_VERSION((short)2, "configVersion"),
    AGENT_TOKEN((short)3, "agentToken"),
    MESSAGE((short)4, "message"),
    DATA((short)5, "data");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // CONFIG_VERSION
          return CONFIG_VERSION;
        case 3: // AGENT_TOKEN
          return AGENT_TOKEN;
        case 4: // MESSAGE
          return MESSAGE;
        case 5: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIGVERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AGENT_TOKEN,_Fields.MESSAGE,_Fields.DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "TAgentStatus")));
    tmpMap.put(_Fields.CONFIG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("configVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGENT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("agentToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentHealthcheckResult.class, metaDataMap);
  }

  public TAgentHealthcheckResult() {
  }

  public TAgentHealthcheckResult(
    TAgentStatus status,
    int configVersion)
  {
    this();
    this.status = status;
    this.configVersion = configVersion;
    setConfigVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentHealthcheckResult(TAgentHealthcheckResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.configVersion = other.configVersion;
    if (other.isSetAgentToken()) {
      this.agentToken = other.agentToken;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetData()) {
      java.util.Map<String,String> __this__data = new java.util.HashMap<String,String>(other.data);
      this.data = __this__data;
    }
  }

  public TAgentHealthcheckResult deepCopy() {
    return new TAgentHealthcheckResult(this);
  }


  public void clear() {
    this.status = null;
    setConfigVersionIsSet(false);
    this.configVersion = 0;
    this.agentToken = null;
    this.message = null;
    this.data = null;
  }

  public TAgentStatus getStatus() {
    return this.status;
  }

  public TAgentHealthcheckResult setStatus(TAgentStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getConfigVersion() {
    return this.configVersion;
  }

  public TAgentHealthcheckResult setConfigVersion(int configVersion) {
    this.configVersion = configVersion;
    setConfigVersionIsSet(true);
    return this;
  }

  public void unsetConfigVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID);
  }

  /** Returns true if field configVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID);
  }

  public void setConfigVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID, value);
  }

  public String getAgentToken() {
    return this.agentToken;
  }

  public TAgentHealthcheckResult setAgentToken(String agentToken) {
    this.agentToken = agentToken;
    return this;
  }

  public void unsetAgentToken() {
    this.agentToken = null;
  }

  /** Returns true if field agentToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentToken() {
    return this.agentToken != null;
  }

  public void setAgentTokenIsSet(boolean value) {
    if (!value) {
      this.agentToken = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public TAgentHealthcheckResult setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public void putToData(String key, String val) {
    if (this.data == null) {
      this.data = new java.util.HashMap<String,String>();
    }
    this.data.put(key, val);
  }

  public java.util.Map<String,String> getData() {
    return this.data;
  }

  public TAgentHealthcheckResult setData(java.util.Map<String,String> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TAgentStatus)value);
      }
      break;

    case CONFIG_VERSION:
      if (value == null) {
        unsetConfigVersion();
      } else {
        setConfigVersion((Integer)value);
      }
      break;

    case AGENT_TOKEN:
      if (value == null) {
        unsetAgentToken();
      } else {
        setAgentToken((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.util.Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case CONFIG_VERSION:
      return getConfigVersion();

    case AGENT_TOKEN:
      return getAgentToken();

    case MESSAGE:
      return getMessage();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case CONFIG_VERSION:
      return isSetConfigVersion();
    case AGENT_TOKEN:
      return isSetAgentToken();
    case MESSAGE:
      return isSetMessage();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }


  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAgentHealthcheckResult)
      return this.equals((TAgentHealthcheckResult)that);
    return false;
  }

  public boolean equals(TAgentHealthcheckResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_configVersion = true;
    boolean that_present_configVersion = true;
    if (this_present_configVersion || that_present_configVersion) {
      if (!(this_present_configVersion && that_present_configVersion))
        return false;
      if (this.configVersion != that.configVersion)
        return false;
    }

    boolean this_present_agentToken = true && this.isSetAgentToken();
    boolean that_present_agentToken = true && that.isSetAgentToken();
    if (this_present_agentToken || that_present_agentToken) {
      if (!(this_present_agentToken && that_present_agentToken))
        return false;
      if (!this.agentToken.equals(that.agentToken))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }


  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + configVersion;

    hashCode = hashCode * 8191 + ((isSetAgentToken()) ? 131071 : 524287);
    if (isSetAgentToken())
      hashCode = hashCode * 8191 + agentToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    return hashCode;
  }


  public int compareTo(TAgentHealthcheckResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfigVersion()).compareTo(other.isSetConfigVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configVersion, other.configVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentToken()).compareTo(other.isSetAgentToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentToken, other.agentToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }


  public String toString() {
    StringBuilder sb = new StringBuilder("TAgentHealthcheckResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("configVersion:");
    sb.append(this.configVersion);
    first = false;
    if (isSetAgentToken()) {
      if (!first) sb.append(", ");
      sb.append("agentToken:");
      if (this.agentToken == null) {
        sb.append("null");
      } else {
        sb.append(this.agentToken);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentHealthcheckResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentHealthcheckResultStandardScheme getScheme() {
      return new TAgentHealthcheckResultStandardScheme();
    }
  }

  private static class TAgentHealthcheckResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAgentHealthcheckResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentHealthcheckResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = TAgentStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONFIG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.configVersion = iprot.readI32();
              struct.setConfigVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentToken = iprot.readString();
              struct.setAgentTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.data = new java.util.HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.data.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentHealthcheckResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONFIG_VERSION_FIELD_DESC);
      oprot.writeI32(struct.configVersion);
      oprot.writeFieldEnd();
      if (struct.agentToken != null) {
        if (struct.isSetAgentToken()) {
          oprot.writeFieldBegin(AGENT_TOKEN_FIELD_DESC);
          oprot.writeString(struct.agentToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.data.size()));
            for (java.util.Map.Entry<String, String> _iter4 : struct.data.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentHealthcheckResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentHealthcheckResultTupleScheme getScheme() {
      return new TAgentHealthcheckResultTupleScheme();
    }
  }

  private static class TAgentHealthcheckResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAgentHealthcheckResult> {


    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentHealthcheckResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetConfigVersion()) {
        optionals.set(1);
      }
      if (struct.isSetAgentToken()) {
        optionals.set(2);
      }
      if (struct.isSetMessage()) {
        optionals.set(3);
      }
      if (struct.isSetData()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetConfigVersion()) {
        oprot.writeI32(struct.configVersion);
      }
      if (struct.isSetAgentToken()) {
        oprot.writeString(struct.agentToken);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (java.util.Map.Entry<String, String> _iter5 : struct.data.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }


    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentHealthcheckResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = TAgentStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.configVersion = iprot.readI32();
        struct.setConfigVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agentToken = iprot.readString();
        struct.setAgentTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.data = new java.util.HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.data.put(_key7, _val8);
          }
        }
        struct.setDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

