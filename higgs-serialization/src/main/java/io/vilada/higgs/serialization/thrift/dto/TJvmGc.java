/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-01")
public class TJvmGc implements org.apache.thrift.TBase<TJvmGc, TJvmGc._Fields>, java.io.Serializable, Cloneable, Comparable<TJvmGc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJvmGc");

  private static final org.apache.thrift.protocol.TField COLLECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("collector", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GC_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("gcCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("gcTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJvmGcStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJvmGcTupleSchemeFactory();

  public String collector; // required
  /**
   * 
   * @see TJvmGcType
   */
  public TJvmGcType type; // required
  public long gcCount; // required
  public long gcTime; // required
  /**
   * 
   * @see TJvmGCArea
   */
  public TJvmGCArea area; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLLECTOR((short)1, "collector"),
    /**
     * 
     * @see TJvmGcType
     */
    TYPE((short)2, "type"),
    GC_COUNT((short)3, "gcCount"),
    GC_TIME((short)4, "gcTime"),
    /**
     * 
     * @see TJvmGCArea
     */
    AREA((short)5, "area");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTOR
          return COLLECTOR;
        case 2: // TYPE
          return TYPE;
        case 3: // GC_COUNT
          return GC_COUNT;
        case 4: // GC_TIME
          return GC_TIME;
        case 5: // AREA
          return AREA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GCCOUNT_ISSET_ID = 0;
  private static final int __GCTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTOR, new org.apache.thrift.meta_data.FieldMetaData("collector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJvmGcType.class)));
    tmpMap.put(_Fields.GC_COUNT, new org.apache.thrift.meta_data.FieldMetaData("gcCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_TIME, new org.apache.thrift.meta_data.FieldMetaData("gcTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJvmGCArea.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJvmGc.class, metaDataMap);
  }

  public TJvmGc() {
    this.type = TJvmGcType.UNKNOWN;

    this.area = TJvmGCArea.UNKNOWN;

  }

  public TJvmGc(
    String collector,
    TJvmGcType type,
    long gcCount,
    long gcTime,
    TJvmGCArea area)
  {
    this();
    this.collector = collector;
    this.type = type;
    this.gcCount = gcCount;
    setGcCountIsSet(true);
    this.gcTime = gcTime;
    setGcTimeIsSet(true);
    this.area = area;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJvmGc(TJvmGc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCollector()) {
      this.collector = other.collector;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.gcCount = other.gcCount;
    this.gcTime = other.gcTime;
    if (other.isSetArea()) {
      this.area = other.area;
    }
  }

  public TJvmGc deepCopy() {
    return new TJvmGc(this);
  }

  public void clear() {
    this.collector = null;
    this.type = TJvmGcType.UNKNOWN;

    setGcCountIsSet(false);
    this.gcCount = 0;
    setGcTimeIsSet(false);
    this.gcTime = 0;
    this.area = TJvmGCArea.UNKNOWN;

  }

  public String getCollector() {
    return this.collector;
  }

  public TJvmGc setCollector(String collector) {
    this.collector = collector;
    return this;
  }

  public void unsetCollector() {
    this.collector = null;
  }

  /** Returns true if field collector is set (has been assigned a value) and false otherwise */
  public boolean isSetCollector() {
    return this.collector != null;
  }

  public void setCollectorIsSet(boolean value) {
    if (!value) {
      this.collector = null;
    }
  }

  /**
   * 
   * @see TJvmGcType
   */
  public TJvmGcType getType() {
    return this.type;
  }

  /**
   * 
   * @see TJvmGcType
   */
  public TJvmGc setType(TJvmGcType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getGcCount() {
    return this.gcCount;
  }

  public TJvmGc setGcCount(long gcCount) {
    this.gcCount = gcCount;
    setGcCountIsSet(true);
    return this;
  }

  public void unsetGcCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GCCOUNT_ISSET_ID);
  }

  /** Returns true if field gcCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGcCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GCCOUNT_ISSET_ID);
  }

  public void setGcCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GCCOUNT_ISSET_ID, value);
  }

  public long getGcTime() {
    return this.gcTime;
  }

  public TJvmGc setGcTime(long gcTime) {
    this.gcTime = gcTime;
    setGcTimeIsSet(true);
    return this;
  }

  public void unsetGcTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GCTIME_ISSET_ID);
  }

  /** Returns true if field gcTime is set (has been assigned a value) and false otherwise */
  public boolean isSetGcTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GCTIME_ISSET_ID);
  }

  public void setGcTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GCTIME_ISSET_ID, value);
  }

  /**
   * 
   * @see TJvmGCArea
   */
  public TJvmGCArea getArea() {
    return this.area;
  }

  /**
   * 
   * @see TJvmGCArea
   */
  public TJvmGc setArea(TJvmGCArea area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTOR:
      if (value == null) {
        unsetCollector();
      } else {
        setCollector((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TJvmGcType)value);
      }
      break;

    case GC_COUNT:
      if (value == null) {
        unsetGcCount();
      } else {
        setGcCount((Long)value);
      }
      break;

    case GC_TIME:
      if (value == null) {
        unsetGcTime();
      } else {
        setGcTime((Long)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((TJvmGCArea)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTOR:
      return getCollector();

    case TYPE:
      return getType();

    case GC_COUNT:
      return getGcCount();

    case GC_TIME:
      return getGcTime();

    case AREA:
      return getArea();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTOR:
      return isSetCollector();
    case TYPE:
      return isSetType();
    case GC_COUNT:
      return isSetGcCount();
    case GC_TIME:
      return isSetGcTime();
    case AREA:
      return isSetArea();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TJvmGc)
      return this.equals((TJvmGc)that);
    return false;
  }

  public boolean equals(TJvmGc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_collector = true && this.isSetCollector();
    boolean that_present_collector = true && that.isSetCollector();
    if (this_present_collector || that_present_collector) {
      if (!(this_present_collector && that_present_collector))
        return false;
      if (!this.collector.equals(that.collector))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_gcCount = true;
    boolean that_present_gcCount = true;
    if (this_present_gcCount || that_present_gcCount) {
      if (!(this_present_gcCount && that_present_gcCount))
        return false;
      if (this.gcCount != that.gcCount)
        return false;
    }

    boolean this_present_gcTime = true;
    boolean that_present_gcTime = true;
    if (this_present_gcTime || that_present_gcTime) {
      if (!(this_present_gcTime && that_present_gcTime))
        return false;
      if (this.gcTime != that.gcTime)
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCollector()) ? 131071 : 524287);
    if (isSetCollector())
      hashCode = hashCode * 8191 + collector.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gcCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(gcTime);

    hashCode = hashCode * 8191 + ((isSetArea()) ? 131071 : 524287);
    if (isSetArea())
      hashCode = hashCode * 8191 + area.getValue();

    return hashCode;
  }

  public int compareTo(TJvmGc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollector()).compareTo(other.isSetCollector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collector, other.collector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGcCount()).compareTo(other.isSetGcCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGcCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gcCount, other.gcCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGcTime()).compareTo(other.isSetGcTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGcTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gcTime, other.gcTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TJvmGc(");
    boolean first = true;

    sb.append("collector:");
    if (this.collector == null) {
      sb.append("null");
    } else {
      sb.append(this.collector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gcCount:");
    sb.append(this.gcCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gcTime:");
    sb.append(this.gcTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    if (this.area == null) {
      sb.append("null");
    } else {
      sb.append(this.area);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJvmGcStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJvmGcStandardScheme getScheme() {
      return new TJvmGcStandardScheme();
    }
  }

  private static class TJvmGcStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJvmGc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TJvmGc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collector = iprot.readString();
              struct.setCollectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TJvmGcType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GC_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gcCount = iprot.readI64();
              struct.setGcCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gcTime = iprot.readI64();
              struct.setGcTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.area = TJvmGCArea.findByValue(iprot.readI32());
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TJvmGc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collector != null) {
        oprot.writeFieldBegin(COLLECTOR_FIELD_DESC);
        oprot.writeString(struct.collector);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GC_COUNT_FIELD_DESC);
      oprot.writeI64(struct.gcCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_TIME_FIELD_DESC);
      oprot.writeI64(struct.gcTime);
      oprot.writeFieldEnd();
      if (struct.area != null) {
        oprot.writeFieldBegin(AREA_FIELD_DESC);
        oprot.writeI32(struct.area.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJvmGcTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJvmGcTupleScheme getScheme() {
      return new TJvmGcTupleScheme();
    }
  }

  private static class TJvmGcTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJvmGc> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TJvmGc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCollector()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetGcCount()) {
        optionals.set(2);
      }
      if (struct.isSetGcTime()) {
        optionals.set(3);
      }
      if (struct.isSetArea()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCollector()) {
        oprot.writeString(struct.collector);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetGcCount()) {
        oprot.writeI64(struct.gcCount);
      }
      if (struct.isSetGcTime()) {
        oprot.writeI64(struct.gcTime);
      }
      if (struct.isSetArea()) {
        oprot.writeI32(struct.area.getValue());
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TJvmGc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.collector = iprot.readString();
        struct.setCollectorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = TJvmGcType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gcCount = iprot.readI64();
        struct.setGcCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gcTime = iprot.readI64();
        struct.setGcTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.area = TJvmGCArea.findByValue(iprot.readI32());
        struct.setAreaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

