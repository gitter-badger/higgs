/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-22")
public class TThreadDump implements org.apache.thrift.TBase<TThreadDump, TThreadDump._Fields>, java.io.Serializable, Cloneable, Comparable<TThreadDump> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TThreadDump");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BLOCKED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("blockedTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BLOCKED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("blockedCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField WAITED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("waitedTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField WAITED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("waitedCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField IS_IN_NATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isInNative", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField STACK_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("stackTrace", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TThreadDumpStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TThreadDumpTupleSchemeFactory();

  public long id; // required
  public String name; // required
  public TThreadState state; // required
  public long cpuTime; // required
  public long blockedTime; // required
  public long blockedCount; // required
  public long waitedTime; // required
  public long waitedCount; // required
  public boolean isInNative; // required
  public java.util.List<TThreadStackTrace> stackTrace; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    STATE((short)3, "state"),
    CPU_TIME((short)4, "cpuTime"),
    BLOCKED_TIME((short)5, "blockedTime"),
    BLOCKED_COUNT((short)6, "blockedCount"),
    WAITED_TIME((short)7, "waitedTime"),
    WAITED_COUNT((short)8, "waitedCount"),
    IS_IN_NATIVE((short)9, "isInNative"),
    STACK_TRACE((short)10, "stackTrace");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // STATE
          return STATE;
        case 4: // CPU_TIME
          return CPU_TIME;
        case 5: // BLOCKED_TIME
          return BLOCKED_TIME;
        case 6: // BLOCKED_COUNT
          return BLOCKED_COUNT;
        case 7: // WAITED_TIME
          return WAITED_TIME;
        case 8: // WAITED_COUNT
          return WAITED_COUNT;
        case 9: // IS_IN_NATIVE
          return IS_IN_NATIVE;
        case 10: // STACK_TRACE
          return STACK_TRACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CPUTIME_ISSET_ID = 1;
  private static final int __BLOCKEDTIME_ISSET_ID = 2;
  private static final int __BLOCKEDCOUNT_ISSET_ID = 3;
  private static final int __WAITEDTIME_ISSET_ID = 4;
  private static final int __WAITEDCOUNT_ISSET_ID = 5;
  private static final int __ISINNATIVE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STACK_TRACE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "TThreadState")));
    tmpMap.put(_Fields.CPU_TIME, new org.apache.thrift.meta_data.FieldMetaData("cpuTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCKED_TIME, new org.apache.thrift.meta_data.FieldMetaData("blockedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCKED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("blockedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WAITED_TIME, new org.apache.thrift.meta_data.FieldMetaData("waitedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WAITED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("waitedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_IN_NATIVE, new org.apache.thrift.meta_data.FieldMetaData("isInNative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STACK_TRACE, new org.apache.thrift.meta_data.FieldMetaData("stackTrace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TThreadStackTrace"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TThreadDump.class, metaDataMap);
  }

  public TThreadDump() {
  }

  public TThreadDump(
    long id,
    String name,
    TThreadState state,
    long cpuTime,
    long blockedTime,
    long blockedCount,
    long waitedTime,
    long waitedCount,
    boolean isInNative)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.state = state;
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    this.blockedTime = blockedTime;
    setBlockedTimeIsSet(true);
    this.blockedCount = blockedCount;
    setBlockedCountIsSet(true);
    this.waitedTime = waitedTime;
    setWaitedTimeIsSet(true);
    this.waitedCount = waitedCount;
    setWaitedCountIsSet(true);
    this.isInNative = isInNative;
    setIsInNativeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TThreadDump(TThreadDump other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.cpuTime = other.cpuTime;
    this.blockedTime = other.blockedTime;
    this.blockedCount = other.blockedCount;
    this.waitedTime = other.waitedTime;
    this.waitedCount = other.waitedCount;
    this.isInNative = other.isInNative;
    if (other.isSetStackTrace()) {
      java.util.List<TThreadStackTrace> __this__stackTrace = new java.util.ArrayList<TThreadStackTrace>(other.stackTrace.size());
      for (TThreadStackTrace other_element : other.stackTrace) {
        __this__stackTrace.add(other_element);
      }
      this.stackTrace = __this__stackTrace;
    }
  }

  public TThreadDump deepCopy() {
    return new TThreadDump(this);
  }

  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.state = null;
    setCpuTimeIsSet(false);
    this.cpuTime = 0;
    setBlockedTimeIsSet(false);
    this.blockedTime = 0;
    setBlockedCountIsSet(false);
    this.blockedCount = 0;
    setWaitedTimeIsSet(false);
    this.waitedTime = 0;
    setWaitedCountIsSet(false);
    this.waitedCount = 0;
    setIsInNativeIsSet(false);
    this.isInNative = false;
    this.stackTrace = null;
  }

  public long getId() {
    return this.id;
  }

  public TThreadDump setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TThreadDump setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public TThreadState getState() {
    return this.state;
  }

  public TThreadDump setState(TThreadState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getCpuTime() {
    return this.cpuTime;
  }

  public TThreadDump setCpuTime(long cpuTime) {
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    return this;
  }

  public void unsetCpuTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUTIME_ISSET_ID);
  }

  /** Returns true if field cpuTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUTIME_ISSET_ID);
  }

  public void setCpuTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUTIME_ISSET_ID, value);
  }

  public long getBlockedTime() {
    return this.blockedTime;
  }

  public TThreadDump setBlockedTime(long blockedTime) {
    this.blockedTime = blockedTime;
    setBlockedTimeIsSet(true);
    return this;
  }

  public void unsetBlockedTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKEDTIME_ISSET_ID);
  }

  /** Returns true if field blockedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockedTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKEDTIME_ISSET_ID);
  }

  public void setBlockedTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKEDTIME_ISSET_ID, value);
  }

  public long getBlockedCount() {
    return this.blockedCount;
  }

  public TThreadDump setBlockedCount(long blockedCount) {
    this.blockedCount = blockedCount;
    setBlockedCountIsSet(true);
    return this;
  }

  public void unsetBlockedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKEDCOUNT_ISSET_ID);
  }

  /** Returns true if field blockedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKEDCOUNT_ISSET_ID);
  }

  public void setBlockedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKEDCOUNT_ISSET_ID, value);
  }

  public long getWaitedTime() {
    return this.waitedTime;
  }

  public TThreadDump setWaitedTime(long waitedTime) {
    this.waitedTime = waitedTime;
    setWaitedTimeIsSet(true);
    return this;
  }

  public void unsetWaitedTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WAITEDTIME_ISSET_ID);
  }

  /** Returns true if field waitedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitedTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WAITEDTIME_ISSET_ID);
  }

  public void setWaitedTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WAITEDTIME_ISSET_ID, value);
  }

  public long getWaitedCount() {
    return this.waitedCount;
  }

  public TThreadDump setWaitedCount(long waitedCount) {
    this.waitedCount = waitedCount;
    setWaitedCountIsSet(true);
    return this;
  }

  public void unsetWaitedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WAITEDCOUNT_ISSET_ID);
  }

  /** Returns true if field waitedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WAITEDCOUNT_ISSET_ID);
  }

  public void setWaitedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WAITEDCOUNT_ISSET_ID, value);
  }

  public boolean isIsInNative() {
    return this.isInNative;
  }

  public TThreadDump setIsInNative(boolean isInNative) {
    this.isInNative = isInNative;
    setIsInNativeIsSet(true);
    return this;
  }

  public void unsetIsInNative() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINNATIVE_ISSET_ID);
  }

  /** Returns true if field isInNative is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInNative() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINNATIVE_ISSET_ID);
  }

  public void setIsInNativeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINNATIVE_ISSET_ID, value);
  }

  public int getStackTraceSize() {
    return (this.stackTrace == null) ? 0 : this.stackTrace.size();
  }

  public java.util.Iterator<TThreadStackTrace> getStackTraceIterator() {
    return (this.stackTrace == null) ? null : this.stackTrace.iterator();
  }

  public void addToStackTrace(TThreadStackTrace elem) {
    if (this.stackTrace == null) {
      this.stackTrace = new java.util.ArrayList<TThreadStackTrace>();
    }
    this.stackTrace.add(elem);
  }

  public java.util.List<TThreadStackTrace> getStackTrace() {
    return this.stackTrace;
  }

  public TThreadDump setStackTrace(java.util.List<TThreadStackTrace> stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  public void unsetStackTrace() {
    this.stackTrace = null;
  }

  /** Returns true if field stackTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetStackTrace() {
    return this.stackTrace != null;
  }

  public void setStackTraceIsSet(boolean value) {
    if (!value) {
      this.stackTrace = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TThreadState)value);
      }
      break;

    case CPU_TIME:
      if (value == null) {
        unsetCpuTime();
      } else {
        setCpuTime((Long)value);
      }
      break;

    case BLOCKED_TIME:
      if (value == null) {
        unsetBlockedTime();
      } else {
        setBlockedTime((Long)value);
      }
      break;

    case BLOCKED_COUNT:
      if (value == null) {
        unsetBlockedCount();
      } else {
        setBlockedCount((Long)value);
      }
      break;

    case WAITED_TIME:
      if (value == null) {
        unsetWaitedTime();
      } else {
        setWaitedTime((Long)value);
      }
      break;

    case WAITED_COUNT:
      if (value == null) {
        unsetWaitedCount();
      } else {
        setWaitedCount((Long)value);
      }
      break;

    case IS_IN_NATIVE:
      if (value == null) {
        unsetIsInNative();
      } else {
        setIsInNative((Boolean)value);
      }
      break;

    case STACK_TRACE:
      if (value == null) {
        unsetStackTrace();
      } else {
        setStackTrace((java.util.List<TThreadStackTrace>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case STATE:
      return getState();

    case CPU_TIME:
      return getCpuTime();

    case BLOCKED_TIME:
      return getBlockedTime();

    case BLOCKED_COUNT:
      return getBlockedCount();

    case WAITED_TIME:
      return getWaitedTime();

    case WAITED_COUNT:
      return getWaitedCount();

    case IS_IN_NATIVE:
      return isIsInNative();

    case STACK_TRACE:
      return getStackTrace();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case STATE:
      return isSetState();
    case CPU_TIME:
      return isSetCpuTime();
    case BLOCKED_TIME:
      return isSetBlockedTime();
    case BLOCKED_COUNT:
      return isSetBlockedCount();
    case WAITED_TIME:
      return isSetWaitedTime();
    case WAITED_COUNT:
      return isSetWaitedCount();
    case IS_IN_NATIVE:
      return isSetIsInNative();
    case STACK_TRACE:
      return isSetStackTrace();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TThreadDump)
      return this.equals((TThreadDump)that);
    return false;
  }

  public boolean equals(TThreadDump that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_cpuTime = true;
    boolean that_present_cpuTime = true;
    if (this_present_cpuTime || that_present_cpuTime) {
      if (!(this_present_cpuTime && that_present_cpuTime))
        return false;
      if (this.cpuTime != that.cpuTime)
        return false;
    }

    boolean this_present_blockedTime = true;
    boolean that_present_blockedTime = true;
    if (this_present_blockedTime || that_present_blockedTime) {
      if (!(this_present_blockedTime && that_present_blockedTime))
        return false;
      if (this.blockedTime != that.blockedTime)
        return false;
    }

    boolean this_present_blockedCount = true;
    boolean that_present_blockedCount = true;
    if (this_present_blockedCount || that_present_blockedCount) {
      if (!(this_present_blockedCount && that_present_blockedCount))
        return false;
      if (this.blockedCount != that.blockedCount)
        return false;
    }

    boolean this_present_waitedTime = true;
    boolean that_present_waitedTime = true;
    if (this_present_waitedTime || that_present_waitedTime) {
      if (!(this_present_waitedTime && that_present_waitedTime))
        return false;
      if (this.waitedTime != that.waitedTime)
        return false;
    }

    boolean this_present_waitedCount = true;
    boolean that_present_waitedCount = true;
    if (this_present_waitedCount || that_present_waitedCount) {
      if (!(this_present_waitedCount && that_present_waitedCount))
        return false;
      if (this.waitedCount != that.waitedCount)
        return false;
    }

    boolean this_present_isInNative = true;
    boolean that_present_isInNative = true;
    if (this_present_isInNative || that_present_isInNative) {
      if (!(this_present_isInNative && that_present_isInNative))
        return false;
      if (this.isInNative != that.isInNative)
        return false;
    }

    boolean this_present_stackTrace = true && this.isSetStackTrace();
    boolean that_present_stackTrace = true && that.isSetStackTrace();
    if (this_present_stackTrace || that_present_stackTrace) {
      if (!(this_present_stackTrace && that_present_stackTrace))
        return false;
      if (!this.stackTrace.equals(that.stackTrace))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpuTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(blockedTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(blockedCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(waitedTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(waitedCount);

    hashCode = hashCode * 8191 + ((isInNative) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStackTrace()) ? 131071 : 524287);
    if (isSetStackTrace())
      hashCode = hashCode * 8191 + stackTrace.hashCode();

    return hashCode;
  }

  public int compareTo(TThreadDump other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuTime()).compareTo(other.isSetCpuTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuTime, other.cpuTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockedTime()).compareTo(other.isSetBlockedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockedTime, other.blockedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockedCount()).compareTo(other.isSetBlockedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockedCount, other.blockedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitedTime()).compareTo(other.isSetWaitedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitedTime, other.waitedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitedCount()).compareTo(other.isSetWaitedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitedCount, other.waitedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInNative()).compareTo(other.isSetIsInNative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInNative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInNative, other.isInNative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStackTrace()).compareTo(other.isSetStackTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStackTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stackTrace, other.stackTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TThreadDump(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuTime:");
    sb.append(this.cpuTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockedTime:");
    sb.append(this.blockedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockedCount:");
    sb.append(this.blockedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitedTime:");
    sb.append(this.waitedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitedCount:");
    sb.append(this.waitedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isInNative:");
    sb.append(this.isInNative);
    first = false;
    if (isSetStackTrace()) {
      if (!first) sb.append(", ");
      sb.append("stackTrace:");
      if (this.stackTrace == null) {
        sb.append("null");
      } else {
        sb.append(this.stackTrace);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TThreadDumpStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TThreadDumpStandardScheme getScheme() {
      return new TThreadDumpStandardScheme();
    }
  }

  private static class TThreadDumpStandardScheme extends org.apache.thrift.scheme.StandardScheme<TThreadDump> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TThreadDump struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = TThreadState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpuTime = iprot.readI64();
              struct.setCpuTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLOCKED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockedTime = iprot.readI64();
              struct.setBlockedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOCKED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockedCount = iprot.readI64();
              struct.setBlockedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WAITED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.waitedTime = iprot.readI64();
              struct.setWaitedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WAITED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.waitedCount = iprot.readI64();
              struct.setWaitedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_IN_NATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInNative = iprot.readBool();
              struct.setIsInNativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STACK_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.stackTrace = new java.util.ArrayList<TThreadStackTrace>(_list32.size);
                TThreadStackTrace _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new TThreadStackTrace();
                  _elem33.read(iprot);
                  struct.stackTrace.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setStackTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TThreadDump struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_TIME_FIELD_DESC);
      oprot.writeI64(struct.cpuTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKED_TIME_FIELD_DESC);
      oprot.writeI64(struct.blockedTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.blockedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAITED_TIME_FIELD_DESC);
      oprot.writeI64(struct.waitedTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAITED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.waitedCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_NATIVE_FIELD_DESC);
      oprot.writeBool(struct.isInNative);
      oprot.writeFieldEnd();
      if (struct.stackTrace != null) {
        if (struct.isSetStackTrace()) {
          oprot.writeFieldBegin(STACK_TRACE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stackTrace.size()));
            for (TThreadStackTrace _iter35 : struct.stackTrace)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TThreadDumpTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TThreadDumpTupleScheme getScheme() {
      return new TThreadDumpTupleScheme();
    }
  }

  private static class TThreadDumpTupleScheme extends org.apache.thrift.scheme.TupleScheme<TThreadDump> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TThreadDump struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetCpuTime()) {
        optionals.set(3);
      }
      if (struct.isSetBlockedTime()) {
        optionals.set(4);
      }
      if (struct.isSetBlockedCount()) {
        optionals.set(5);
      }
      if (struct.isSetWaitedTime()) {
        optionals.set(6);
      }
      if (struct.isSetWaitedCount()) {
        optionals.set(7);
      }
      if (struct.isSetIsInNative()) {
        optionals.set(8);
      }
      if (struct.isSetStackTrace()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetCpuTime()) {
        oprot.writeI64(struct.cpuTime);
      }
      if (struct.isSetBlockedTime()) {
        oprot.writeI64(struct.blockedTime);
      }
      if (struct.isSetBlockedCount()) {
        oprot.writeI64(struct.blockedCount);
      }
      if (struct.isSetWaitedTime()) {
        oprot.writeI64(struct.waitedTime);
      }
      if (struct.isSetWaitedCount()) {
        oprot.writeI64(struct.waitedCount);
      }
      if (struct.isSetIsInNative()) {
        oprot.writeBool(struct.isInNative);
      }
      if (struct.isSetStackTrace()) {
        {
          oprot.writeI32(struct.stackTrace.size());
          for (TThreadStackTrace _iter36 : struct.stackTrace)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TThreadDump struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = TThreadState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpuTime = iprot.readI64();
        struct.setCpuTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.blockedTime = iprot.readI64();
        struct.setBlockedTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.blockedCount = iprot.readI64();
        struct.setBlockedCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.waitedTime = iprot.readI64();
        struct.setWaitedTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.waitedCount = iprot.readI64();
        struct.setWaitedCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isInNative = iprot.readBool();
        struct.setIsInNativeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stackTrace = new java.util.ArrayList<TThreadStackTrace>(_list37.size);
          TThreadStackTrace _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new TThreadStackTrace();
            _elem38.read(iprot);
            struct.stackTrace.add(_elem38);
          }
        }
        struct.setStackTraceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

