/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-22")
public class TThreadDumpBatch implements org.apache.thrift.TBase<TThreadDumpBatch, TThreadDumpBatch._Fields>, java.io.Serializable, Cloneable, Comparable<TThreadDumpBatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TThreadDumpBatch");

  private static final org.apache.thrift.protocol.TField AGENT_THREAD_DUMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentThreadDumpId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField THREAD_DUMPS_FIELD_DESC = new org.apache.thrift.protocol.TField("threadDumps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tierId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TThreadDumpBatchStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TThreadDumpBatchTupleSchemeFactory();

  public long agentThreadDumpId; // required
  public long startTimestamp; // required
  public long interval; // required
  public java.util.List<TThreadDump> threadDumps; // optional
  public String instanceId; // optional
  public String tierId; // optional
  public String appId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_THREAD_DUMP_ID((short)1, "agentThreadDumpId"),
    START_TIMESTAMP((short)2, "startTimestamp"),
    INTERVAL((short)3, "interval"),
    THREAD_DUMPS((short)4, "threadDumps"),
    INSTANCE_ID((short)5, "instanceId"),
    TIER_ID((short)6, "tierId"),
    APP_ID((short)7, "appId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_THREAD_DUMP_ID
          return AGENT_THREAD_DUMP_ID;
        case 2: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 3: // INTERVAL
          return INTERVAL;
        case 4: // THREAD_DUMPS
          return THREAD_DUMPS;
        case 5: // INSTANCE_ID
          return INSTANCE_ID;
        case 6: // TIER_ID
          return TIER_ID;
        case 7: // APP_ID
          return APP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGENTTHREADDUMPID_ISSET_ID = 0;
  private static final int __STARTTIMESTAMP_ISSET_ID = 1;
  private static final int __INTERVAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.THREAD_DUMPS,_Fields.INSTANCE_ID,_Fields.TIER_ID,_Fields.APP_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_THREAD_DUMP_ID, new org.apache.thrift.meta_data.FieldMetaData("agentThreadDumpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.THREAD_DUMPS, new org.apache.thrift.meta_data.FieldMetaData("threadDumps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TThreadDump"))));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER_ID, new org.apache.thrift.meta_data.FieldMetaData("tierId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TThreadDumpBatch.class, metaDataMap);
  }

  public TThreadDumpBatch() {
  }

  public TThreadDumpBatch(
    long agentThreadDumpId,
    long startTimestamp,
    long interval)
  {
    this();
    this.agentThreadDumpId = agentThreadDumpId;
    setAgentThreadDumpIdIsSet(true);
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    this.interval = interval;
    setIntervalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TThreadDumpBatch(TThreadDumpBatch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.agentThreadDumpId = other.agentThreadDumpId;
    this.startTimestamp = other.startTimestamp;
    this.interval = other.interval;
    if (other.isSetThreadDumps()) {
      java.util.List<TThreadDump> __this__threadDumps = new java.util.ArrayList<TThreadDump>(other.threadDumps.size());
      for (TThreadDump other_element : other.threadDumps) {
        __this__threadDumps.add(other_element);
      }
      this.threadDumps = __this__threadDumps;
    }
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetTierId()) {
      this.tierId = other.tierId;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
  }

  public TThreadDumpBatch deepCopy() {
    return new TThreadDumpBatch(this);
  }

  public void clear() {
    setAgentThreadDumpIdIsSet(false);
    this.agentThreadDumpId = 0;
    setStartTimestampIsSet(false);
    this.startTimestamp = 0;
    setIntervalIsSet(false);
    this.interval = 0;
    this.threadDumps = null;
    this.instanceId = null;
    this.tierId = null;
    this.appId = null;
  }

  public long getAgentThreadDumpId() {
    return this.agentThreadDumpId;
  }

  public TThreadDumpBatch setAgentThreadDumpId(long agentThreadDumpId) {
    this.agentThreadDumpId = agentThreadDumpId;
    setAgentThreadDumpIdIsSet(true);
    return this;
  }

  public void unsetAgentThreadDumpId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGENTTHREADDUMPID_ISSET_ID);
  }

  /** Returns true if field agentThreadDumpId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentThreadDumpId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGENTTHREADDUMPID_ISSET_ID);
  }

  public void setAgentThreadDumpIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGENTTHREADDUMPID_ISSET_ID, value);
  }

  public long getStartTimestamp() {
    return this.startTimestamp;
  }

  public TThreadDumpBatch setStartTimestamp(long startTimestamp) {
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    return this;
  }

  public void unsetStartTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  public void setStartTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID, value);
  }

  public long getInterval() {
    return this.interval;
  }

  public TThreadDumpBatch setInterval(long interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public int getThreadDumpsSize() {
    return (this.threadDumps == null) ? 0 : this.threadDumps.size();
  }

  public java.util.Iterator<TThreadDump> getThreadDumpsIterator() {
    return (this.threadDumps == null) ? null : this.threadDumps.iterator();
  }

  public void addToThreadDumps(TThreadDump elem) {
    if (this.threadDumps == null) {
      this.threadDumps = new java.util.ArrayList<TThreadDump>();
    }
    this.threadDumps.add(elem);
  }

  public java.util.List<TThreadDump> getThreadDumps() {
    return this.threadDumps;
  }

  public TThreadDumpBatch setThreadDumps(java.util.List<TThreadDump> threadDumps) {
    this.threadDumps = threadDumps;
    return this;
  }

  public void unsetThreadDumps() {
    this.threadDumps = null;
  }

  /** Returns true if field threadDumps is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadDumps() {
    return this.threadDumps != null;
  }

  public void setThreadDumpsIsSet(boolean value) {
    if (!value) {
      this.threadDumps = null;
    }
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public TThreadDumpBatch setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getTierId() {
    return this.tierId;
  }

  public TThreadDumpBatch setTierId(String tierId) {
    this.tierId = tierId;
    return this;
  }

  public void unsetTierId() {
    this.tierId = null;
  }

  /** Returns true if field tierId is set (has been assigned a value) and false otherwise */
  public boolean isSetTierId() {
    return this.tierId != null;
  }

  public void setTierIdIsSet(boolean value) {
    if (!value) {
      this.tierId = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public TThreadDumpBatch setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_THREAD_DUMP_ID:
      if (value == null) {
        unsetAgentThreadDumpId();
      } else {
        setAgentThreadDumpId((Long)value);
      }
      break;

    case START_TIMESTAMP:
      if (value == null) {
        unsetStartTimestamp();
      } else {
        setStartTimestamp((Long)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Long)value);
      }
      break;

    case THREAD_DUMPS:
      if (value == null) {
        unsetThreadDumps();
      } else {
        setThreadDumps((java.util.List<TThreadDump>)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case TIER_ID:
      if (value == null) {
        unsetTierId();
      } else {
        setTierId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_THREAD_DUMP_ID:
      return getAgentThreadDumpId();

    case START_TIMESTAMP:
      return getStartTimestamp();

    case INTERVAL:
      return getInterval();

    case THREAD_DUMPS:
      return getThreadDumps();

    case INSTANCE_ID:
      return getInstanceId();

    case TIER_ID:
      return getTierId();

    case APP_ID:
      return getAppId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_THREAD_DUMP_ID:
      return isSetAgentThreadDumpId();
    case START_TIMESTAMP:
      return isSetStartTimestamp();
    case INTERVAL:
      return isSetInterval();
    case THREAD_DUMPS:
      return isSetThreadDumps();
    case INSTANCE_ID:
      return isSetInstanceId();
    case TIER_ID:
      return isSetTierId();
    case APP_ID:
      return isSetAppId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TThreadDumpBatch)
      return this.equals((TThreadDumpBatch)that);
    return false;
  }

  public boolean equals(TThreadDumpBatch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agentThreadDumpId = true;
    boolean that_present_agentThreadDumpId = true;
    if (this_present_agentThreadDumpId || that_present_agentThreadDumpId) {
      if (!(this_present_agentThreadDumpId && that_present_agentThreadDumpId))
        return false;
      if (this.agentThreadDumpId != that.agentThreadDumpId)
        return false;
    }

    boolean this_present_startTimestamp = true;
    boolean that_present_startTimestamp = true;
    if (this_present_startTimestamp || that_present_startTimestamp) {
      if (!(this_present_startTimestamp && that_present_startTimestamp))
        return false;
      if (this.startTimestamp != that.startTimestamp)
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_threadDumps = true && this.isSetThreadDumps();
    boolean that_present_threadDumps = true && that.isSetThreadDumps();
    if (this_present_threadDumps || that_present_threadDumps) {
      if (!(this_present_threadDumps && that_present_threadDumps))
        return false;
      if (!this.threadDumps.equals(that.threadDumps))
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_tierId = true && this.isSetTierId();
    boolean that_present_tierId = true && that.isSetTierId();
    if (this_present_tierId || that_present_tierId) {
      if (!(this_present_tierId && that_present_tierId))
        return false;
      if (!this.tierId.equals(that.tierId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(agentThreadDumpId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTimestamp);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(interval);

    hashCode = hashCode * 8191 + ((isSetThreadDumps()) ? 131071 : 524287);
    if (isSetThreadDumps())
      hashCode = hashCode * 8191 + threadDumps.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
    if (isSetInstanceId())
      hashCode = hashCode * 8191 + instanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTierId()) ? 131071 : 524287);
    if (isSetTierId())
      hashCode = hashCode * 8191 + tierId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    return hashCode;
  }

  public int compareTo(TThreadDumpBatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentThreadDumpId()).compareTo(other.isSetAgentThreadDumpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentThreadDumpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentThreadDumpId, other.agentThreadDumpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(other.isSetStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, other.startTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, other.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadDumps()).compareTo(other.isSetThreadDumps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadDumps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadDumps, other.threadDumps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTierId()).compareTo(other.isSetTierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierId, other.tierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TThreadDumpBatch(");
    boolean first = true;

    sb.append("agentThreadDumpId:");
    sb.append(this.agentThreadDumpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimestamp:");
    sb.append(this.startTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (isSetThreadDumps()) {
      if (!first) sb.append(", ");
      sb.append("threadDumps:");
      if (this.threadDumps == null) {
        sb.append("null");
      } else {
        sb.append(this.threadDumps);
      }
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetTierId()) {
      if (!first) sb.append(", ");
      sb.append("tierId:");
      if (this.tierId == null) {
        sb.append("null");
      } else {
        sb.append(this.tierId);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TThreadDumpBatchStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TThreadDumpBatchStandardScheme getScheme() {
      return new TThreadDumpBatchStandardScheme();
    }
  }

  private static class TThreadDumpBatchStandardScheme extends org.apache.thrift.scheme.StandardScheme<TThreadDumpBatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TThreadDumpBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_THREAD_DUMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.agentThreadDumpId = iprot.readI64();
              struct.setAgentThreadDumpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestamp = iprot.readI64();
              struct.setStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.interval = iprot.readI64();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THREAD_DUMPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.threadDumps = new java.util.ArrayList<TThreadDump>(_list24.size);
                TThreadDump _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new TThreadDump();
                  _elem25.read(iprot);
                  struct.threadDumps.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setThreadDumpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tierId = iprot.readString();
              struct.setTierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TThreadDumpBatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AGENT_THREAD_DUMP_ID_FIELD_DESC);
      oprot.writeI64(struct.agentThreadDumpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.startTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI64(struct.interval);
      oprot.writeFieldEnd();
      if (struct.threadDumps != null) {
        if (struct.isSetThreadDumps()) {
          oprot.writeFieldBegin(THREAD_DUMPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.threadDumps.size()));
            for (TThreadDump _iter27 : struct.threadDumps)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tierId != null) {
        if (struct.isSetTierId()) {
          oprot.writeFieldBegin(TIER_ID_FIELD_DESC);
          oprot.writeString(struct.tierId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TThreadDumpBatchTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TThreadDumpBatchTupleScheme getScheme() {
      return new TThreadDumpBatchTupleScheme();
    }
  }

  private static class TThreadDumpBatchTupleScheme extends org.apache.thrift.scheme.TupleScheme<TThreadDumpBatch> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TThreadDumpBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAgentThreadDumpId()) {
        optionals.set(0);
      }
      if (struct.isSetStartTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetInterval()) {
        optionals.set(2);
      }
      if (struct.isSetThreadDumps()) {
        optionals.set(3);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(4);
      }
      if (struct.isSetTierId()) {
        optionals.set(5);
      }
      if (struct.isSetAppId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAgentThreadDumpId()) {
        oprot.writeI64(struct.agentThreadDumpId);
      }
      if (struct.isSetStartTimestamp()) {
        oprot.writeI64(struct.startTimestamp);
      }
      if (struct.isSetInterval()) {
        oprot.writeI64(struct.interval);
      }
      if (struct.isSetThreadDumps()) {
        {
          oprot.writeI32(struct.threadDumps.size());
          for (TThreadDump _iter28 : struct.threadDumps)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetTierId()) {
        oprot.writeString(struct.tierId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TThreadDumpBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.agentThreadDumpId = iprot.readI64();
        struct.setAgentThreadDumpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTimestamp = iprot.readI64();
        struct.setStartTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interval = iprot.readI64();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.threadDumps = new java.util.ArrayList<TThreadDump>(_list29.size);
          TThreadDump _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TThreadDump();
            _elem30.read(iprot);
            struct.threadDumps.add(_elem30);
          }
        }
        struct.setThreadDumpsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tierId = iprot.readString();
        struct.setTierIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

