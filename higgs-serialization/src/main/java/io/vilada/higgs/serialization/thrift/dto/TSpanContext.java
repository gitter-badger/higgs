/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-22")
public class TSpanContext implements org.apache.thrift.TBase<TSpanContext, TSpanContext._Fields>, java.io.Serializable, Cloneable, Comparable<TSpanContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSpanContext");

  private static final org.apache.thrift.protocol.TField PARENT_AGENT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("parentAgentToken", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SPAN_REFERER_FIELD_DESC = new org.apache.thrift.protocol.TField("spanReferer", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BAGGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("baggage", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tierId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSpanContextStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSpanContextTupleSchemeFactory();

  public String parentAgentToken; // optional
  public String traceId; // required
  public String spanId; // required
  public String parentSpanId; // required
  public String spanReferer; // required
  public int index; // required
  public java.util.Map<String,String> baggage; // optional
  public String instanceId; // optional
  public String tierId; // optional
  public String appId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_AGENT_TOKEN((short)1, "parentAgentToken"),
    TRACE_ID((short)2, "traceId"),
    SPAN_ID((short)3, "spanId"),
    PARENT_SPAN_ID((short)4, "parentSpanId"),
    SPAN_REFERER((short)5, "spanReferer"),
    INDEX((short)6, "index"),
    BAGGAGE((short)7, "baggage"),
    INSTANCE_ID((short)8, "instanceId"),
    TIER_ID((short)9, "tierId"),
    APP_ID((short)10, "appId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_AGENT_TOKEN
          return PARENT_AGENT_TOKEN;
        case 2: // TRACE_ID
          return TRACE_ID;
        case 3: // SPAN_ID
          return SPAN_ID;
        case 4: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 5: // SPAN_REFERER
          return SPAN_REFERER;
        case 6: // INDEX
          return INDEX;
        case 7: // BAGGAGE
          return BAGGAGE;
        case 8: // INSTANCE_ID
          return INSTANCE_ID;
        case 9: // TIER_ID
          return TIER_ID;
        case 10: // APP_ID
          return APP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARENT_AGENT_TOKEN,_Fields.BAGGAGE,_Fields.INSTANCE_ID,_Fields.TIER_ID,_Fields.APP_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_AGENT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("parentAgentToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_REFERER, new org.apache.thrift.meta_data.FieldMetaData("spanReferer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAGGAGE, new org.apache.thrift.meta_data.FieldMetaData("baggage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER_ID, new org.apache.thrift.meta_data.FieldMetaData("tierId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSpanContext.class, metaDataMap);
  }

  public TSpanContext() {
  }

  public TSpanContext(
    String traceId,
    String spanId,
    String parentSpanId,
    String spanReferer,
    int index)
  {
    this();
    this.traceId = traceId;
    this.spanId = spanId;
    this.parentSpanId = parentSpanId;
    this.spanReferer = spanReferer;
    this.index = index;
    setIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSpanContext(TSpanContext other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetParentAgentToken()) {
      this.parentAgentToken = other.parentAgentToken;
    }
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetSpanId()) {
      this.spanId = other.spanId;
    }
    if (other.isSetParentSpanId()) {
      this.parentSpanId = other.parentSpanId;
    }
    if (other.isSetSpanReferer()) {
      this.spanReferer = other.spanReferer;
    }
    this.index = other.index;
    if (other.isSetBaggage()) {
      java.util.Map<String,String> __this__baggage = new java.util.HashMap<String,String>(other.baggage);
      this.baggage = __this__baggage;
    }
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetTierId()) {
      this.tierId = other.tierId;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
  }

  public TSpanContext deepCopy() {
    return new TSpanContext(this);
  }

  public void clear() {
    this.parentAgentToken = null;
    this.traceId = null;
    this.spanId = null;
    this.parentSpanId = null;
    this.spanReferer = null;
    setIndexIsSet(false);
    this.index = 0;
    this.baggage = null;
    this.instanceId = null;
    this.tierId = null;
    this.appId = null;
  }

  public String getParentAgentToken() {
    return this.parentAgentToken;
  }

  public TSpanContext setParentAgentToken(String parentAgentToken) {
    this.parentAgentToken = parentAgentToken;
    return this;
  }

  public void unsetParentAgentToken() {
    this.parentAgentToken = null;
  }

  /** Returns true if field parentAgentToken is set (has been assigned a value) and false otherwise */
  public boolean isSetParentAgentToken() {
    return this.parentAgentToken != null;
  }

  public void setParentAgentTokenIsSet(boolean value) {
    if (!value) {
      this.parentAgentToken = null;
    }
  }

  public String getTraceId() {
    return this.traceId;
  }

  public TSpanContext setTraceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public String getSpanId() {
    return this.spanId;
  }

  public TSpanContext setSpanId(String spanId) {
    this.spanId = spanId;
    return this;
  }

  public void unsetSpanId() {
    this.spanId = null;
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return this.spanId != null;
  }

  public void setSpanIdIsSet(boolean value) {
    if (!value) {
      this.spanId = null;
    }
  }

  public String getParentSpanId() {
    return this.parentSpanId;
  }

  public TSpanContext setParentSpanId(String parentSpanId) {
    this.parentSpanId = parentSpanId;
    return this;
  }

  public void unsetParentSpanId() {
    this.parentSpanId = null;
  }

  /** Returns true if field parentSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return this.parentSpanId != null;
  }

  public void setParentSpanIdIsSet(boolean value) {
    if (!value) {
      this.parentSpanId = null;
    }
  }

  public String getSpanReferer() {
    return this.spanReferer;
  }

  public TSpanContext setSpanReferer(String spanReferer) {
    this.spanReferer = spanReferer;
    return this;
  }

  public void unsetSpanReferer() {
    this.spanReferer = null;
  }

  /** Returns true if field spanReferer is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanReferer() {
    return this.spanReferer != null;
  }

  public void setSpanRefererIsSet(boolean value) {
    if (!value) {
      this.spanReferer = null;
    }
  }

  public int getIndex() {
    return this.index;
  }

  public TSpanContext setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public int getBaggageSize() {
    return (this.baggage == null) ? 0 : this.baggage.size();
  }

  public void putToBaggage(String key, String val) {
    if (this.baggage == null) {
      this.baggage = new java.util.HashMap<String,String>();
    }
    this.baggage.put(key, val);
  }

  public java.util.Map<String,String> getBaggage() {
    return this.baggage;
  }

  public TSpanContext setBaggage(java.util.Map<String,String> baggage) {
    this.baggage = baggage;
    return this;
  }

  public void unsetBaggage() {
    this.baggage = null;
  }

  /** Returns true if field baggage is set (has been assigned a value) and false otherwise */
  public boolean isSetBaggage() {
    return this.baggage != null;
  }

  public void setBaggageIsSet(boolean value) {
    if (!value) {
      this.baggage = null;
    }
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public TSpanContext setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getTierId() {
    return this.tierId;
  }

  public TSpanContext setTierId(String tierId) {
    this.tierId = tierId;
    return this;
  }

  public void unsetTierId() {
    this.tierId = null;
  }

  /** Returns true if field tierId is set (has been assigned a value) and false otherwise */
  public boolean isSetTierId() {
    return this.tierId != null;
  }

  public void setTierIdIsSet(boolean value) {
    if (!value) {
      this.tierId = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public TSpanContext setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARENT_AGENT_TOKEN:
      if (value == null) {
        unsetParentAgentToken();
      } else {
        setParentAgentToken((String)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((String)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((String)value);
      }
      break;

    case SPAN_REFERER:
      if (value == null) {
        unsetSpanReferer();
      } else {
        setSpanReferer((String)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case BAGGAGE:
      if (value == null) {
        unsetBaggage();
      } else {
        setBaggage((java.util.Map<String,String>)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case TIER_ID:
      if (value == null) {
        unsetTierId();
      } else {
        setTierId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_AGENT_TOKEN:
      return getParentAgentToken();

    case TRACE_ID:
      return getTraceId();

    case SPAN_ID:
      return getSpanId();

    case PARENT_SPAN_ID:
      return getParentSpanId();

    case SPAN_REFERER:
      return getSpanReferer();

    case INDEX:
      return getIndex();

    case BAGGAGE:
      return getBaggage();

    case INSTANCE_ID:
      return getInstanceId();

    case TIER_ID:
      return getTierId();

    case APP_ID:
      return getAppId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARENT_AGENT_TOKEN:
      return isSetParentAgentToken();
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case SPAN_REFERER:
      return isSetSpanReferer();
    case INDEX:
      return isSetIndex();
    case BAGGAGE:
      return isSetBaggage();
    case INSTANCE_ID:
      return isSetInstanceId();
    case TIER_ID:
      return isSetTierId();
    case APP_ID:
      return isSetAppId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSpanContext)
      return this.equals((TSpanContext)that);
    return false;
  }

  public boolean equals(TSpanContext that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parentAgentToken = true && this.isSetParentAgentToken();
    boolean that_present_parentAgentToken = true && that.isSetParentAgentToken();
    if (this_present_parentAgentToken || that_present_parentAgentToken) {
      if (!(this_present_parentAgentToken && that_present_parentAgentToken))
        return false;
      if (!this.parentAgentToken.equals(that.parentAgentToken))
        return false;
    }

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_spanId = true && this.isSetSpanId();
    boolean that_present_spanId = true && that.isSetSpanId();
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (!this.spanId.equals(that.spanId))
        return false;
    }

    boolean this_present_parentSpanId = true && this.isSetParentSpanId();
    boolean that_present_parentSpanId = true && that.isSetParentSpanId();
    if (this_present_parentSpanId || that_present_parentSpanId) {
      if (!(this_present_parentSpanId && that_present_parentSpanId))
        return false;
      if (!this.parentSpanId.equals(that.parentSpanId))
        return false;
    }

    boolean this_present_spanReferer = true && this.isSetSpanReferer();
    boolean that_present_spanReferer = true && that.isSetSpanReferer();
    if (this_present_spanReferer || that_present_spanReferer) {
      if (!(this_present_spanReferer && that_present_spanReferer))
        return false;
      if (!this.spanReferer.equals(that.spanReferer))
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_baggage = true && this.isSetBaggage();
    boolean that_present_baggage = true && that.isSetBaggage();
    if (this_present_baggage || that_present_baggage) {
      if (!(this_present_baggage && that_present_baggage))
        return false;
      if (!this.baggage.equals(that.baggage))
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_tierId = true && this.isSetTierId();
    boolean that_present_tierId = true && that.isSetTierId();
    if (this_present_tierId || that_present_tierId) {
      if (!(this_present_tierId && that_present_tierId))
        return false;
      if (!this.tierId.equals(that.tierId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParentAgentToken()) ? 131071 : 524287);
    if (isSetParentAgentToken())
      hashCode = hashCode * 8191 + parentAgentToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpanId()) ? 131071 : 524287);
    if (isSetSpanId())
      hashCode = hashCode * 8191 + spanId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentSpanId()) ? 131071 : 524287);
    if (isSetParentSpanId())
      hashCode = hashCode * 8191 + parentSpanId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpanReferer()) ? 131071 : 524287);
    if (isSetSpanReferer())
      hashCode = hashCode * 8191 + spanReferer.hashCode();

    hashCode = hashCode * 8191 + index;

    hashCode = hashCode * 8191 + ((isSetBaggage()) ? 131071 : 524287);
    if (isSetBaggage())
      hashCode = hashCode * 8191 + baggage.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
    if (isSetInstanceId())
      hashCode = hashCode * 8191 + instanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTierId()) ? 131071 : 524287);
    if (isSetTierId())
      hashCode = hashCode * 8191 + tierId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    return hashCode;
  }

  public int compareTo(TSpanContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParentAgentToken()).compareTo(other.isSetParentAgentToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentAgentToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentAgentToken, other.parentAgentToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(other.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, other.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentSpanId()).compareTo(other.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanId, other.parentSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanReferer()).compareTo(other.isSetSpanReferer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanReferer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanReferer, other.spanReferer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaggage()).compareTo(other.isSetBaggage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaggage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baggage, other.baggage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTierId()).compareTo(other.isSetTierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierId, other.tierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSpanContext(");
    boolean first = true;

    if (isSetParentAgentToken()) {
      sb.append("parentAgentToken:");
      if (this.parentAgentToken == null) {
        sb.append("null");
      } else {
        sb.append(this.parentAgentToken);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    if (this.spanId == null) {
      sb.append("null");
    } else {
      sb.append(this.spanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentSpanId:");
    if (this.parentSpanId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentSpanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanReferer:");
    if (this.spanReferer == null) {
      sb.append("null");
    } else {
      sb.append(this.spanReferer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (isSetBaggage()) {
      if (!first) sb.append(", ");
      sb.append("baggage:");
      if (this.baggage == null) {
        sb.append("null");
      } else {
        sb.append(this.baggage);
      }
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetTierId()) {
      if (!first) sb.append(", ");
      sb.append("tierId:");
      if (this.tierId == null) {
        sb.append("null");
      } else {
        sb.append(this.tierId);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSpanContextStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSpanContextStandardScheme getScheme() {
      return new TSpanContextStandardScheme();
    }
  }

  private static class TSpanContextStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSpanContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSpanContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_AGENT_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentAgentToken = iprot.readString();
              struct.setParentAgentTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanId = iprot.readString();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentSpanId = iprot.readString();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPAN_REFERER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanReferer = iprot.readString();
              struct.setSpanRefererIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BAGGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                struct.baggage = new java.util.HashMap<String,String>(2*_map54.size);
                String _key55;
                String _val56;
                for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                {
                  _key55 = iprot.readString();
                  _val56 = iprot.readString();
                  struct.baggage.put(_key55, _val56);
                }
                iprot.readMapEnd();
              }
              struct.setBaggageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tierId = iprot.readString();
              struct.setTierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSpanContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parentAgentToken != null) {
        if (struct.isSetParentAgentToken()) {
          oprot.writeFieldBegin(PARENT_AGENT_TOKEN_FIELD_DESC);
          oprot.writeString(struct.parentAgentToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      if (struct.spanId != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanId);
        oprot.writeFieldEnd();
      }
      if (struct.parentSpanId != null) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.parentSpanId);
        oprot.writeFieldEnd();
      }
      if (struct.spanReferer != null) {
        oprot.writeFieldBegin(SPAN_REFERER_FIELD_DESC);
        oprot.writeString(struct.spanReferer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(struct.index);
      oprot.writeFieldEnd();
      if (struct.baggage != null) {
        if (struct.isSetBaggage()) {
          oprot.writeFieldBegin(BAGGAGE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.baggage.size()));
            for (java.util.Map.Entry<String, String> _iter58 : struct.baggage.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tierId != null) {
        if (struct.isSetTierId()) {
          oprot.writeFieldBegin(TIER_ID_FIELD_DESC);
          oprot.writeString(struct.tierId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSpanContextTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSpanContextTupleScheme getScheme() {
      return new TSpanContextTupleScheme();
    }
  }

  private static class TSpanContextTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSpanContext> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TSpanContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParentAgentToken()) {
        optionals.set(0);
      }
      if (struct.isSetTraceId()) {
        optionals.set(1);
      }
      if (struct.isSetSpanId()) {
        optionals.set(2);
      }
      if (struct.isSetParentSpanId()) {
        optionals.set(3);
      }
      if (struct.isSetSpanReferer()) {
        optionals.set(4);
      }
      if (struct.isSetIndex()) {
        optionals.set(5);
      }
      if (struct.isSetBaggage()) {
        optionals.set(6);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(7);
      }
      if (struct.isSetTierId()) {
        optionals.set(8);
      }
      if (struct.isSetAppId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetParentAgentToken()) {
        oprot.writeString(struct.parentAgentToken);
      }
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetSpanId()) {
        oprot.writeString(struct.spanId);
      }
      if (struct.isSetParentSpanId()) {
        oprot.writeString(struct.parentSpanId);
      }
      if (struct.isSetSpanReferer()) {
        oprot.writeString(struct.spanReferer);
      }
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetBaggage()) {
        {
          oprot.writeI32(struct.baggage.size());
          for (java.util.Map.Entry<String, String> _iter59 : struct.baggage.entrySet())
          {
            oprot.writeString(_iter59.getKey());
            oprot.writeString(_iter59.getValue());
          }
        }
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetTierId()) {
        oprot.writeString(struct.tierId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TSpanContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.parentAgentToken = iprot.readString();
        struct.setParentAgentTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spanId = iprot.readString();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parentSpanId = iprot.readString();
        struct.setParentSpanIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spanReferer = iprot.readString();
        struct.setSpanRefererIsSet(true);
      }
      if (incoming.get(5)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.baggage = new java.util.HashMap<String,String>(2*_map60.size);
          String _key61;
          String _val62;
          for (int _i63 = 0; _i63 < _map60.size; ++_i63)
          {
            _key61 = iprot.readString();
            _val62 = iprot.readString();
            struct.baggage.put(_key61, _val62);
          }
        }
        struct.setBaggageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tierId = iprot.readString();
        struct.setTierIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

