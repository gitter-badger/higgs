/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-24")
public class TAgentHealthcheckRequest implements org.apache.thrift.TBase<TAgentHealthcheckRequest, TAgentHealthcheckRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentHealthcheckRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentHealthcheckRequest");

  private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tierName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAgentHealthcheckRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAgentHealthcheckRequestTupleSchemeFactory();

  public String applicationName; // required
  public String tierName; // required
  public String instanceName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_NAME((short)1, "applicationName"),
    TIER_NAME((short)2, "tierName"),
    INSTANCE_NAME((short)3, "instanceName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_NAME
          return APPLICATION_NAME;
        case 2: // TIER_NAME
          return TIER_NAME;
        case 3: // INSTANCE_NAME
          return INSTANCE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INSTANCE_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER_NAME, new org.apache.thrift.meta_data.FieldMetaData("tierName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentHealthcheckRequest.class, metaDataMap);
  }

  public TAgentHealthcheckRequest() {
  }

  public TAgentHealthcheckRequest(
    String applicationName,
    String tierName)
  {
    this();
    this.applicationName = applicationName;
    this.tierName = tierName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentHealthcheckRequest(TAgentHealthcheckRequest other) {
    if (other.isSetApplicationName()) {
      this.applicationName = other.applicationName;
    }
    if (other.isSetTierName()) {
      this.tierName = other.tierName;
    }
    if (other.isSetInstanceName()) {
      this.instanceName = other.instanceName;
    }
  }

  public TAgentHealthcheckRequest deepCopy() {
    return new TAgentHealthcheckRequest(this);
  }


  public void clear() {
    this.applicationName = null;
    this.tierName = null;
    this.instanceName = null;
  }

  public String getApplicationName() {
    return this.applicationName;
  }

  public TAgentHealthcheckRequest setApplicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  public void unsetApplicationName() {
    this.applicationName = null;
  }

  /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationName() {
    return this.applicationName != null;
  }

  public void setApplicationNameIsSet(boolean value) {
    if (!value) {
      this.applicationName = null;
    }
  }

  public String getTierName() {
    return this.tierName;
  }

  public TAgentHealthcheckRequest setTierName(String tierName) {
    this.tierName = tierName;
    return this;
  }

  public void unsetTierName() {
    this.tierName = null;
  }

  /** Returns true if field tierName is set (has been assigned a value) and false otherwise */
  public boolean isSetTierName() {
    return this.tierName != null;
  }

  public void setTierNameIsSet(boolean value) {
    if (!value) {
      this.tierName = null;
    }
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  public TAgentHealthcheckRequest setInstanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  public void unsetInstanceName() {
    this.instanceName = null;
  }

  /** Returns true if field instanceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceName() {
    return this.instanceName != null;
  }

  public void setInstanceNameIsSet(boolean value) {
    if (!value) {
      this.instanceName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_NAME:
      if (value == null) {
        unsetApplicationName();
      } else {
        setApplicationName((String)value);
      }
      break;

    case TIER_NAME:
      if (value == null) {
        unsetTierName();
      } else {
        setTierName((String)value);
      }
      break;

    case INSTANCE_NAME:
      if (value == null) {
        unsetInstanceName();
      } else {
        setInstanceName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_NAME:
      return getApplicationName();

    case TIER_NAME:
      return getTierName();

    case INSTANCE_NAME:
      return getInstanceName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_NAME:
      return isSetApplicationName();
    case TIER_NAME:
      return isSetTierName();
    case INSTANCE_NAME:
      return isSetInstanceName();
    }
    throw new IllegalStateException();
  }


  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAgentHealthcheckRequest)
      return this.equals((TAgentHealthcheckRequest)that);
    return false;
  }

  public boolean equals(TAgentHealthcheckRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_applicationName = true && this.isSetApplicationName();
    boolean that_present_applicationName = true && that.isSetApplicationName();
    if (this_present_applicationName || that_present_applicationName) {
      if (!(this_present_applicationName && that_present_applicationName))
        return false;
      if (!this.applicationName.equals(that.applicationName))
        return false;
    }

    boolean this_present_tierName = true && this.isSetTierName();
    boolean that_present_tierName = true && that.isSetTierName();
    if (this_present_tierName || that_present_tierName) {
      if (!(this_present_tierName && that_present_tierName))
        return false;
      if (!this.tierName.equals(that.tierName))
        return false;
    }

    boolean this_present_instanceName = true && this.isSetInstanceName();
    boolean that_present_instanceName = true && that.isSetInstanceName();
    if (this_present_instanceName || that_present_instanceName) {
      if (!(this_present_instanceName && that_present_instanceName))
        return false;
      if (!this.instanceName.equals(that.instanceName))
        return false;
    }

    return true;
  }


  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApplicationName()) ? 131071 : 524287);
    if (isSetApplicationName())
      hashCode = hashCode * 8191 + applicationName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTierName()) ? 131071 : 524287);
    if (isSetTierName())
      hashCode = hashCode * 8191 + tierName.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstanceName()) ? 131071 : 524287);
    if (isSetInstanceName())
      hashCode = hashCode * 8191 + instanceName.hashCode();

    return hashCode;
  }


  public int compareTo(TAgentHealthcheckRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTierName()).compareTo(other.isSetTierName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTierName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierName, other.tierName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceName()).compareTo(other.isSetInstanceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceName, other.instanceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }


  public String toString() {
    StringBuilder sb = new StringBuilder("TAgentHealthcheckRequest(");
    boolean first = true;

    sb.append("applicationName:");
    if (this.applicationName == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tierName:");
    if (this.tierName == null) {
      sb.append("null");
    } else {
      sb.append(this.tierName);
    }
    first = false;
    if (isSetInstanceName()) {
      if (!first) sb.append(", ");
      sb.append("instanceName:");
      if (this.instanceName == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentHealthcheckRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentHealthcheckRequestStandardScheme getScheme() {
      return new TAgentHealthcheckRequestStandardScheme();
    }
  }

  private static class TAgentHealthcheckRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAgentHealthcheckRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentHealthcheckRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationName = iprot.readString();
              struct.setApplicationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tierName = iprot.readString();
              struct.setTierNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTANCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceName = iprot.readString();
              struct.setInstanceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentHealthcheckRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationName != null) {
        oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
        oprot.writeString(struct.applicationName);
        oprot.writeFieldEnd();
      }
      if (struct.tierName != null) {
        oprot.writeFieldBegin(TIER_NAME_FIELD_DESC);
        oprot.writeString(struct.tierName);
        oprot.writeFieldEnd();
      }
      if (struct.instanceName != null) {
        if (struct.isSetInstanceName()) {
          oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
          oprot.writeString(struct.instanceName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentHealthcheckRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentHealthcheckRequestTupleScheme getScheme() {
      return new TAgentHealthcheckRequestTupleScheme();
    }
  }

  private static class TAgentHealthcheckRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAgentHealthcheckRequest> {


    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentHealthcheckRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetApplicationName()) {
        optionals.set(0);
      }
      if (struct.isSetTierName()) {
        optionals.set(1);
      }
      if (struct.isSetInstanceName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetApplicationName()) {
        oprot.writeString(struct.applicationName);
      }
      if (struct.isSetTierName()) {
        oprot.writeString(struct.tierName);
      }
      if (struct.isSetInstanceName()) {
        oprot.writeString(struct.instanceName);
      }
    }


    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentHealthcheckRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.applicationName = iprot.readString();
        struct.setApplicationNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tierName = iprot.readString();
        struct.setTierNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instanceName = iprot.readString();
        struct.setInstanceNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

