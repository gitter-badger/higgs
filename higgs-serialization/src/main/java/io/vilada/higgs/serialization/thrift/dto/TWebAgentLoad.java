/*
 * Copyright 2018 The Higgs Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.vilada.higgs.serialization.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-22")
public class TWebAgentLoad implements org.apache.thrift.TBase<TWebAgentLoad, TWebAgentLoad._Fields>, java.io.Serializable, Cloneable, Comparable<TWebAgentLoad> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWebAgentLoad");

  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tierId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField URL_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("urlDomain", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("urlQuery", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reportTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FIRST_SCREEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstScreenTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField WHITE_SCREEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("whiteScreenTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField OPERABLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operableTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField RESOURCE_LOADED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceLoadedTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LOADED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loadedTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField BROWSER_FIELD_DESC = new org.apache.thrift.protocol.TField("browser", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BACKUP_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("backupProperties", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField BACKUP_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("backupQuota", org.apache.thrift.protocol.TType.MAP, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TWebAgentLoadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TWebAgentLoadTupleSchemeFactory();

  public String instanceId; // optional
  public String tierId; // optional
  public String appId; // optional
  public String traceId; // required
  public String urlDomain; // required
  public String urlQuery; // required
  public long reportTime; // required
  public long firstScreenTime; // required
  public long whiteScreenTime; // required
  public long operableTime; // required
  public long resourceLoadedTime; // required
  public long loadedTime; // required
  public String browser; // required
  public java.util.Map<String,String> backupProperties; // optional
  public java.util.Map<String,Long> backupQuota; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_ID((short)1, "instanceId"),
    TIER_ID((short)2, "tierId"),
    APP_ID((short)3, "appId"),
    TRACE_ID((short)4, "traceId"),
    URL_DOMAIN((short)5, "urlDomain"),
    URL_QUERY((short)6, "urlQuery"),
    REPORT_TIME((short)7, "reportTime"),
    FIRST_SCREEN_TIME((short)8, "firstScreenTime"),
    WHITE_SCREEN_TIME((short)9, "whiteScreenTime"),
    OPERABLE_TIME((short)10, "operableTime"),
    RESOURCE_LOADED_TIME((short)11, "resourceLoadedTime"),
    LOADED_TIME((short)12, "loadedTime"),
    BROWSER((short)13, "browser"),
    BACKUP_PROPERTIES((short)14, "backupProperties"),
    BACKUP_QUOTA((short)15, "backupQuota");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_ID
          return INSTANCE_ID;
        case 2: // TIER_ID
          return TIER_ID;
        case 3: // APP_ID
          return APP_ID;
        case 4: // TRACE_ID
          return TRACE_ID;
        case 5: // URL_DOMAIN
          return URL_DOMAIN;
        case 6: // URL_QUERY
          return URL_QUERY;
        case 7: // REPORT_TIME
          return REPORT_TIME;
        case 8: // FIRST_SCREEN_TIME
          return FIRST_SCREEN_TIME;
        case 9: // WHITE_SCREEN_TIME
          return WHITE_SCREEN_TIME;
        case 10: // OPERABLE_TIME
          return OPERABLE_TIME;
        case 11: // RESOURCE_LOADED_TIME
          return RESOURCE_LOADED_TIME;
        case 12: // LOADED_TIME
          return LOADED_TIME;
        case 13: // BROWSER
          return BROWSER;
        case 14: // BACKUP_PROPERTIES
          return BACKUP_PROPERTIES;
        case 15: // BACKUP_QUOTA
          return BACKUP_QUOTA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORTTIME_ISSET_ID = 0;
  private static final int __FIRSTSCREENTIME_ISSET_ID = 1;
  private static final int __WHITESCREENTIME_ISSET_ID = 2;
  private static final int __OPERABLETIME_ISSET_ID = 3;
  private static final int __RESOURCELOADEDTIME_ISSET_ID = 4;
  private static final int __LOADEDTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INSTANCE_ID,_Fields.TIER_ID,_Fields.APP_ID,_Fields.BACKUP_PROPERTIES,_Fields.BACKUP_QUOTA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER_ID, new org.apache.thrift.meta_data.FieldMetaData("tierId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("urlDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL_QUERY, new org.apache.thrift.meta_data.FieldMetaData("urlQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("reportTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRST_SCREEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("firstScreenTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WHITE_SCREEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("whiteScreenTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERABLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operableTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_LOADED_TIME, new org.apache.thrift.meta_data.FieldMetaData("resourceLoadedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_TIME, new org.apache.thrift.meta_data.FieldMetaData("loadedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BROWSER, new org.apache.thrift.meta_data.FieldMetaData("browser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKUP_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("backupProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BACKUP_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("backupQuota", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWebAgentLoad.class, metaDataMap);
  }

  public TWebAgentLoad() {
  }

  public TWebAgentLoad(
    String traceId,
    String urlDomain,
    String urlQuery,
    long reportTime,
    long firstScreenTime,
    long whiteScreenTime,
    long operableTime,
    long resourceLoadedTime,
    long loadedTime,
    String browser)
  {
    this();
    this.traceId = traceId;
    this.urlDomain = urlDomain;
    this.urlQuery = urlQuery;
    this.reportTime = reportTime;
    setReportTimeIsSet(true);
    this.firstScreenTime = firstScreenTime;
    setFirstScreenTimeIsSet(true);
    this.whiteScreenTime = whiteScreenTime;
    setWhiteScreenTimeIsSet(true);
    this.operableTime = operableTime;
    setOperableTimeIsSet(true);
    this.resourceLoadedTime = resourceLoadedTime;
    setResourceLoadedTimeIsSet(true);
    this.loadedTime = loadedTime;
    setLoadedTimeIsSet(true);
    this.browser = browser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWebAgentLoad(TWebAgentLoad other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetTierId()) {
      this.tierId = other.tierId;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetUrlDomain()) {
      this.urlDomain = other.urlDomain;
    }
    if (other.isSetUrlQuery()) {
      this.urlQuery = other.urlQuery;
    }
    this.reportTime = other.reportTime;
    this.firstScreenTime = other.firstScreenTime;
    this.whiteScreenTime = other.whiteScreenTime;
    this.operableTime = other.operableTime;
    this.resourceLoadedTime = other.resourceLoadedTime;
    this.loadedTime = other.loadedTime;
    if (other.isSetBrowser()) {
      this.browser = other.browser;
    }
    if (other.isSetBackupProperties()) {
      java.util.Map<String,String> __this__backupProperties = new java.util.HashMap<String,String>(other.backupProperties);
      this.backupProperties = __this__backupProperties;
    }
    if (other.isSetBackupQuota()) {
      java.util.Map<String,Long> __this__backupQuota = new java.util.HashMap<String,Long>(other.backupQuota);
      this.backupQuota = __this__backupQuota;
    }
  }

  public TWebAgentLoad deepCopy() {
    return new TWebAgentLoad(this);
  }

  public void clear() {
    this.instanceId = null;
    this.tierId = null;
    this.appId = null;
    this.traceId = null;
    this.urlDomain = null;
    this.urlQuery = null;
    setReportTimeIsSet(false);
    this.reportTime = 0;
    setFirstScreenTimeIsSet(false);
    this.firstScreenTime = 0;
    setWhiteScreenTimeIsSet(false);
    this.whiteScreenTime = 0;
    setOperableTimeIsSet(false);
    this.operableTime = 0;
    setResourceLoadedTimeIsSet(false);
    this.resourceLoadedTime = 0;
    setLoadedTimeIsSet(false);
    this.loadedTime = 0;
    this.browser = null;
    this.backupProperties = null;
    this.backupQuota = null;
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public TWebAgentLoad setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getTierId() {
    return this.tierId;
  }

  public TWebAgentLoad setTierId(String tierId) {
    this.tierId = tierId;
    return this;
  }

  public void unsetTierId() {
    this.tierId = null;
  }

  /** Returns true if field tierId is set (has been assigned a value) and false otherwise */
  public boolean isSetTierId() {
    return this.tierId != null;
  }

  public void setTierIdIsSet(boolean value) {
    if (!value) {
      this.tierId = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public TWebAgentLoad setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public String getTraceId() {
    return this.traceId;
  }

  public TWebAgentLoad setTraceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public String getUrlDomain() {
    return this.urlDomain;
  }

  public TWebAgentLoad setUrlDomain(String urlDomain) {
    this.urlDomain = urlDomain;
    return this;
  }

  public void unsetUrlDomain() {
    this.urlDomain = null;
  }

  /** Returns true if field urlDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlDomain() {
    return this.urlDomain != null;
  }

  public void setUrlDomainIsSet(boolean value) {
    if (!value) {
      this.urlDomain = null;
    }
  }

  public String getUrlQuery() {
    return this.urlQuery;
  }

  public TWebAgentLoad setUrlQuery(String urlQuery) {
    this.urlQuery = urlQuery;
    return this;
  }

  public void unsetUrlQuery() {
    this.urlQuery = null;
  }

  /** Returns true if field urlQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlQuery() {
    return this.urlQuery != null;
  }

  public void setUrlQueryIsSet(boolean value) {
    if (!value) {
      this.urlQuery = null;
    }
  }

  public long getReportTime() {
    return this.reportTime;
  }

  public TWebAgentLoad setReportTime(long reportTime) {
    this.reportTime = reportTime;
    setReportTimeIsSet(true);
    return this;
  }

  public void unsetReportTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORTTIME_ISSET_ID);
  }

  /** Returns true if field reportTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReportTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORTTIME_ISSET_ID);
  }

  public void setReportTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORTTIME_ISSET_ID, value);
  }

  public long getFirstScreenTime() {
    return this.firstScreenTime;
  }

  public TWebAgentLoad setFirstScreenTime(long firstScreenTime) {
    this.firstScreenTime = firstScreenTime;
    setFirstScreenTimeIsSet(true);
    return this;
  }

  public void unsetFirstScreenTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRSTSCREENTIME_ISSET_ID);
  }

  /** Returns true if field firstScreenTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstScreenTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRSTSCREENTIME_ISSET_ID);
  }

  public void setFirstScreenTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRSTSCREENTIME_ISSET_ID, value);
  }

  public long getWhiteScreenTime() {
    return this.whiteScreenTime;
  }

  public TWebAgentLoad setWhiteScreenTime(long whiteScreenTime) {
    this.whiteScreenTime = whiteScreenTime;
    setWhiteScreenTimeIsSet(true);
    return this;
  }

  public void unsetWhiteScreenTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WHITESCREENTIME_ISSET_ID);
  }

  /** Returns true if field whiteScreenTime is set (has been assigned a value) and false otherwise */
  public boolean isSetWhiteScreenTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WHITESCREENTIME_ISSET_ID);
  }

  public void setWhiteScreenTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WHITESCREENTIME_ISSET_ID, value);
  }

  public long getOperableTime() {
    return this.operableTime;
  }

  public TWebAgentLoad setOperableTime(long operableTime) {
    this.operableTime = operableTime;
    setOperableTimeIsSet(true);
    return this;
  }

  public void unsetOperableTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERABLETIME_ISSET_ID);
  }

  /** Returns true if field operableTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOperableTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERABLETIME_ISSET_ID);
  }

  public void setOperableTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERABLETIME_ISSET_ID, value);
  }

  public long getResourceLoadedTime() {
    return this.resourceLoadedTime;
  }

  public TWebAgentLoad setResourceLoadedTime(long resourceLoadedTime) {
    this.resourceLoadedTime = resourceLoadedTime;
    setResourceLoadedTimeIsSet(true);
    return this;
  }

  public void unsetResourceLoadedTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESOURCELOADEDTIME_ISSET_ID);
  }

  /** Returns true if field resourceLoadedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceLoadedTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESOURCELOADEDTIME_ISSET_ID);
  }

  public void setResourceLoadedTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESOURCELOADEDTIME_ISSET_ID, value);
  }

  public long getLoadedTime() {
    return this.loadedTime;
  }

  public TWebAgentLoad setLoadedTime(long loadedTime) {
    this.loadedTime = loadedTime;
    setLoadedTimeIsSet(true);
    return this;
  }

  public void unsetLoadedTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADEDTIME_ISSET_ID);
  }

  /** Returns true if field loadedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADEDTIME_ISSET_ID);
  }

  public void setLoadedTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADEDTIME_ISSET_ID, value);
  }

  public String getBrowser() {
    return this.browser;
  }

  public TWebAgentLoad setBrowser(String browser) {
    this.browser = browser;
    return this;
  }

  public void unsetBrowser() {
    this.browser = null;
  }

  /** Returns true if field browser is set (has been assigned a value) and false otherwise */
  public boolean isSetBrowser() {
    return this.browser != null;
  }

  public void setBrowserIsSet(boolean value) {
    if (!value) {
      this.browser = null;
    }
  }

  public int getBackupPropertiesSize() {
    return (this.backupProperties == null) ? 0 : this.backupProperties.size();
  }

  public void putToBackupProperties(String key, String val) {
    if (this.backupProperties == null) {
      this.backupProperties = new java.util.HashMap<String,String>();
    }
    this.backupProperties.put(key, val);
  }

  public java.util.Map<String,String> getBackupProperties() {
    return this.backupProperties;
  }

  public TWebAgentLoad setBackupProperties(java.util.Map<String,String> backupProperties) {
    this.backupProperties = backupProperties;
    return this;
  }

  public void unsetBackupProperties() {
    this.backupProperties = null;
  }

  /** Returns true if field backupProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetBackupProperties() {
    return this.backupProperties != null;
  }

  public void setBackupPropertiesIsSet(boolean value) {
    if (!value) {
      this.backupProperties = null;
    }
  }

  public int getBackupQuotaSize() {
    return (this.backupQuota == null) ? 0 : this.backupQuota.size();
  }

  public void putToBackupQuota(String key, long val) {
    if (this.backupQuota == null) {
      this.backupQuota = new java.util.HashMap<String,Long>();
    }
    this.backupQuota.put(key, val);
  }

  public java.util.Map<String,Long> getBackupQuota() {
    return this.backupQuota;
  }

  public TWebAgentLoad setBackupQuota(java.util.Map<String,Long> backupQuota) {
    this.backupQuota = backupQuota;
    return this;
  }

  public void unsetBackupQuota() {
    this.backupQuota = null;
  }

  /** Returns true if field backupQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetBackupQuota() {
    return this.backupQuota != null;
  }

  public void setBackupQuotaIsSet(boolean value) {
    if (!value) {
      this.backupQuota = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case TIER_ID:
      if (value == null) {
        unsetTierId();
      } else {
        setTierId((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;

    case URL_DOMAIN:
      if (value == null) {
        unsetUrlDomain();
      } else {
        setUrlDomain((String)value);
      }
      break;

    case URL_QUERY:
      if (value == null) {
        unsetUrlQuery();
      } else {
        setUrlQuery((String)value);
      }
      break;

    case REPORT_TIME:
      if (value == null) {
        unsetReportTime();
      } else {
        setReportTime((Long)value);
      }
      break;

    case FIRST_SCREEN_TIME:
      if (value == null) {
        unsetFirstScreenTime();
      } else {
        setFirstScreenTime((Long)value);
      }
      break;

    case WHITE_SCREEN_TIME:
      if (value == null) {
        unsetWhiteScreenTime();
      } else {
        setWhiteScreenTime((Long)value);
      }
      break;

    case OPERABLE_TIME:
      if (value == null) {
        unsetOperableTime();
      } else {
        setOperableTime((Long)value);
      }
      break;

    case RESOURCE_LOADED_TIME:
      if (value == null) {
        unsetResourceLoadedTime();
      } else {
        setResourceLoadedTime((Long)value);
      }
      break;

    case LOADED_TIME:
      if (value == null) {
        unsetLoadedTime();
      } else {
        setLoadedTime((Long)value);
      }
      break;

    case BROWSER:
      if (value == null) {
        unsetBrowser();
      } else {
        setBrowser((String)value);
      }
      break;

    case BACKUP_PROPERTIES:
      if (value == null) {
        unsetBackupProperties();
      } else {
        setBackupProperties((java.util.Map<String,String>)value);
      }
      break;

    case BACKUP_QUOTA:
      if (value == null) {
        unsetBackupQuota();
      } else {
        setBackupQuota((java.util.Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_ID:
      return getInstanceId();

    case TIER_ID:
      return getTierId();

    case APP_ID:
      return getAppId();

    case TRACE_ID:
      return getTraceId();

    case URL_DOMAIN:
      return getUrlDomain();

    case URL_QUERY:
      return getUrlQuery();

    case REPORT_TIME:
      return getReportTime();

    case FIRST_SCREEN_TIME:
      return getFirstScreenTime();

    case WHITE_SCREEN_TIME:
      return getWhiteScreenTime();

    case OPERABLE_TIME:
      return getOperableTime();

    case RESOURCE_LOADED_TIME:
      return getResourceLoadedTime();

    case LOADED_TIME:
      return getLoadedTime();

    case BROWSER:
      return getBrowser();

    case BACKUP_PROPERTIES:
      return getBackupProperties();

    case BACKUP_QUOTA:
      return getBackupQuota();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_ID:
      return isSetInstanceId();
    case TIER_ID:
      return isSetTierId();
    case APP_ID:
      return isSetAppId();
    case TRACE_ID:
      return isSetTraceId();
    case URL_DOMAIN:
      return isSetUrlDomain();
    case URL_QUERY:
      return isSetUrlQuery();
    case REPORT_TIME:
      return isSetReportTime();
    case FIRST_SCREEN_TIME:
      return isSetFirstScreenTime();
    case WHITE_SCREEN_TIME:
      return isSetWhiteScreenTime();
    case OPERABLE_TIME:
      return isSetOperableTime();
    case RESOURCE_LOADED_TIME:
      return isSetResourceLoadedTime();
    case LOADED_TIME:
      return isSetLoadedTime();
    case BROWSER:
      return isSetBrowser();
    case BACKUP_PROPERTIES:
      return isSetBackupProperties();
    case BACKUP_QUOTA:
      return isSetBackupQuota();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TWebAgentLoad)
      return this.equals((TWebAgentLoad)that);
    return false;
  }

  public boolean equals(TWebAgentLoad that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_tierId = true && this.isSetTierId();
    boolean that_present_tierId = true && that.isSetTierId();
    if (this_present_tierId || that_present_tierId) {
      if (!(this_present_tierId && that_present_tierId))
        return false;
      if (!this.tierId.equals(that.tierId))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_urlDomain = true && this.isSetUrlDomain();
    boolean that_present_urlDomain = true && that.isSetUrlDomain();
    if (this_present_urlDomain || that_present_urlDomain) {
      if (!(this_present_urlDomain && that_present_urlDomain))
        return false;
      if (!this.urlDomain.equals(that.urlDomain))
        return false;
    }

    boolean this_present_urlQuery = true && this.isSetUrlQuery();
    boolean that_present_urlQuery = true && that.isSetUrlQuery();
    if (this_present_urlQuery || that_present_urlQuery) {
      if (!(this_present_urlQuery && that_present_urlQuery))
        return false;
      if (!this.urlQuery.equals(that.urlQuery))
        return false;
    }

    boolean this_present_reportTime = true;
    boolean that_present_reportTime = true;
    if (this_present_reportTime || that_present_reportTime) {
      if (!(this_present_reportTime && that_present_reportTime))
        return false;
      if (this.reportTime != that.reportTime)
        return false;
    }

    boolean this_present_firstScreenTime = true;
    boolean that_present_firstScreenTime = true;
    if (this_present_firstScreenTime || that_present_firstScreenTime) {
      if (!(this_present_firstScreenTime && that_present_firstScreenTime))
        return false;
      if (this.firstScreenTime != that.firstScreenTime)
        return false;
    }

    boolean this_present_whiteScreenTime = true;
    boolean that_present_whiteScreenTime = true;
    if (this_present_whiteScreenTime || that_present_whiteScreenTime) {
      if (!(this_present_whiteScreenTime && that_present_whiteScreenTime))
        return false;
      if (this.whiteScreenTime != that.whiteScreenTime)
        return false;
    }

    boolean this_present_operableTime = true;
    boolean that_present_operableTime = true;
    if (this_present_operableTime || that_present_operableTime) {
      if (!(this_present_operableTime && that_present_operableTime))
        return false;
      if (this.operableTime != that.operableTime)
        return false;
    }

    boolean this_present_resourceLoadedTime = true;
    boolean that_present_resourceLoadedTime = true;
    if (this_present_resourceLoadedTime || that_present_resourceLoadedTime) {
      if (!(this_present_resourceLoadedTime && that_present_resourceLoadedTime))
        return false;
      if (this.resourceLoadedTime != that.resourceLoadedTime)
        return false;
    }

    boolean this_present_loadedTime = true;
    boolean that_present_loadedTime = true;
    if (this_present_loadedTime || that_present_loadedTime) {
      if (!(this_present_loadedTime && that_present_loadedTime))
        return false;
      if (this.loadedTime != that.loadedTime)
        return false;
    }

    boolean this_present_browser = true && this.isSetBrowser();
    boolean that_present_browser = true && that.isSetBrowser();
    if (this_present_browser || that_present_browser) {
      if (!(this_present_browser && that_present_browser))
        return false;
      if (!this.browser.equals(that.browser))
        return false;
    }

    boolean this_present_backupProperties = true && this.isSetBackupProperties();
    boolean that_present_backupProperties = true && that.isSetBackupProperties();
    if (this_present_backupProperties || that_present_backupProperties) {
      if (!(this_present_backupProperties && that_present_backupProperties))
        return false;
      if (!this.backupProperties.equals(that.backupProperties))
        return false;
    }

    boolean this_present_backupQuota = true && this.isSetBackupQuota();
    boolean that_present_backupQuota = true && that.isSetBackupQuota();
    if (this_present_backupQuota || that_present_backupQuota) {
      if (!(this_present_backupQuota && that_present_backupQuota))
        return false;
      if (!this.backupQuota.equals(that.backupQuota))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInstanceId()) ? 131071 : 524287);
    if (isSetInstanceId())
      hashCode = hashCode * 8191 + instanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTierId()) ? 131071 : 524287);
    if (isSetTierId())
      hashCode = hashCode * 8191 + tierId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrlDomain()) ? 131071 : 524287);
    if (isSetUrlDomain())
      hashCode = hashCode * 8191 + urlDomain.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrlQuery()) ? 131071 : 524287);
    if (isSetUrlQuery())
      hashCode = hashCode * 8191 + urlQuery.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reportTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(firstScreenTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(whiteScreenTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operableTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(resourceLoadedTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadedTime);

    hashCode = hashCode * 8191 + ((isSetBrowser()) ? 131071 : 524287);
    if (isSetBrowser())
      hashCode = hashCode * 8191 + browser.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackupProperties()) ? 131071 : 524287);
    if (isSetBackupProperties())
      hashCode = hashCode * 8191 + backupProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackupQuota()) ? 131071 : 524287);
    if (isSetBackupQuota())
      hashCode = hashCode * 8191 + backupQuota.hashCode();

    return hashCode;
  }

  public int compareTo(TWebAgentLoad other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTierId()).compareTo(other.isSetTierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierId, other.tierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlDomain()).compareTo(other.isSetUrlDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlDomain, other.urlDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlQuery()).compareTo(other.isSetUrlQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlQuery, other.urlQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportTime()).compareTo(other.isSetReportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportTime, other.reportTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstScreenTime()).compareTo(other.isSetFirstScreenTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstScreenTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstScreenTime, other.firstScreenTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhiteScreenTime()).compareTo(other.isSetWhiteScreenTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhiteScreenTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whiteScreenTime, other.whiteScreenTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperableTime()).compareTo(other.isSetOperableTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperableTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operableTime, other.operableTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceLoadedTime()).compareTo(other.isSetResourceLoadedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceLoadedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceLoadedTime, other.resourceLoadedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoadedTime()).compareTo(other.isSetLoadedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadedTime, other.loadedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrowser()).compareTo(other.isSetBrowser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrowser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.browser, other.browser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackupProperties()).compareTo(other.isSetBackupProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackupProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backupProperties, other.backupProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackupQuota()).compareTo(other.isSetBackupQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackupQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backupQuota, other.backupQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TWebAgentLoad(");
    boolean first = true;

    if (isSetInstanceId()) {
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetTierId()) {
      if (!first) sb.append(", ");
      sb.append("tierId:");
      if (this.tierId == null) {
        sb.append("null");
      } else {
        sb.append(this.tierId);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlDomain:");
    if (this.urlDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.urlDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlQuery:");
    if (this.urlQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.urlQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportTime:");
    sb.append(this.reportTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstScreenTime:");
    sb.append(this.firstScreenTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("whiteScreenTime:");
    sb.append(this.whiteScreenTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operableTime:");
    sb.append(this.operableTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceLoadedTime:");
    sb.append(this.resourceLoadedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loadedTime:");
    sb.append(this.loadedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("browser:");
    if (this.browser == null) {
      sb.append("null");
    } else {
      sb.append(this.browser);
    }
    first = false;
    if (isSetBackupProperties()) {
      if (!first) sb.append(", ");
      sb.append("backupProperties:");
      if (this.backupProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.backupProperties);
      }
      first = false;
    }
    if (isSetBackupQuota()) {
      if (!first) sb.append(", ");
      sb.append("backupQuota:");
      if (this.backupQuota == null) {
        sb.append("null");
      } else {
        sb.append(this.backupQuota);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWebAgentLoadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TWebAgentLoadStandardScheme getScheme() {
      return new TWebAgentLoadStandardScheme();
    }
  }

  private static class TWebAgentLoadStandardScheme extends org.apache.thrift.scheme.StandardScheme<TWebAgentLoad> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TWebAgentLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tierId = iprot.readString();
              struct.setTierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URL_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.urlDomain = iprot.readString();
              struct.setUrlDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.urlQuery = iprot.readString();
              struct.setUrlQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reportTime = iprot.readI64();
              struct.setReportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIRST_SCREEN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstScreenTime = iprot.readI64();
              struct.setFirstScreenTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WHITE_SCREEN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.whiteScreenTime = iprot.readI64();
              struct.setWhiteScreenTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERABLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operableTime = iprot.readI64();
              struct.setOperableTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESOURCE_LOADED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resourceLoadedTime = iprot.readI64();
              struct.setResourceLoadedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOADED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadedTime = iprot.readI64();
              struct.setLoadedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BROWSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.browser = iprot.readString();
              struct.setBrowserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BACKUP_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.backupProperties = new java.util.HashMap<String,String>(2*_map8.size);
                String _key9;
                String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.backupProperties.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setBackupPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BACKUP_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.backupQuota = new java.util.HashMap<String,Long>(2*_map12.size);
                String _key13;
                long _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readString();
                  _val14 = iprot.readI64();
                  struct.backupQuota.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setBackupQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TWebAgentLoad struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tierId != null) {
        if (struct.isSetTierId()) {
          oprot.writeFieldBegin(TIER_ID_FIELD_DESC);
          oprot.writeString(struct.tierId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      if (struct.urlDomain != null) {
        oprot.writeFieldBegin(URL_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.urlDomain);
        oprot.writeFieldEnd();
      }
      if (struct.urlQuery != null) {
        oprot.writeFieldBegin(URL_QUERY_FIELD_DESC);
        oprot.writeString(struct.urlQuery);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPORT_TIME_FIELD_DESC);
      oprot.writeI64(struct.reportTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_SCREEN_TIME_FIELD_DESC);
      oprot.writeI64(struct.firstScreenTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WHITE_SCREEN_TIME_FIELD_DESC);
      oprot.writeI64(struct.whiteScreenTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERABLE_TIME_FIELD_DESC);
      oprot.writeI64(struct.operableTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESOURCE_LOADED_TIME_FIELD_DESC);
      oprot.writeI64(struct.resourceLoadedTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOADED_TIME_FIELD_DESC);
      oprot.writeI64(struct.loadedTime);
      oprot.writeFieldEnd();
      if (struct.browser != null) {
        oprot.writeFieldBegin(BROWSER_FIELD_DESC);
        oprot.writeString(struct.browser);
        oprot.writeFieldEnd();
      }
      if (struct.backupProperties != null) {
        if (struct.isSetBackupProperties()) {
          oprot.writeFieldBegin(BACKUP_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.backupProperties.size()));
            for (java.util.Map.Entry<String, String> _iter16 : struct.backupProperties.entrySet())
            {
              oprot.writeString(_iter16.getKey());
              oprot.writeString(_iter16.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.backupQuota != null) {
        if (struct.isSetBackupQuota()) {
          oprot.writeFieldBegin(BACKUP_QUOTA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.backupQuota.size()));
            for (java.util.Map.Entry<String, Long> _iter17 : struct.backupQuota.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              oprot.writeI64(_iter17.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWebAgentLoadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TWebAgentLoadTupleScheme getScheme() {
      return new TWebAgentLoadTupleScheme();
    }
  }

  private static class TWebAgentLoadTupleScheme extends org.apache.thrift.scheme.TupleScheme<TWebAgentLoad> {

    public void write(org.apache.thrift.protocol.TProtocol prot, TWebAgentLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetTierId()) {
        optionals.set(1);
      }
      if (struct.isSetAppId()) {
        optionals.set(2);
      }
      if (struct.isSetTraceId()) {
        optionals.set(3);
      }
      if (struct.isSetUrlDomain()) {
        optionals.set(4);
      }
      if (struct.isSetUrlQuery()) {
        optionals.set(5);
      }
      if (struct.isSetReportTime()) {
        optionals.set(6);
      }
      if (struct.isSetFirstScreenTime()) {
        optionals.set(7);
      }
      if (struct.isSetWhiteScreenTime()) {
        optionals.set(8);
      }
      if (struct.isSetOperableTime()) {
        optionals.set(9);
      }
      if (struct.isSetResourceLoadedTime()) {
        optionals.set(10);
      }
      if (struct.isSetLoadedTime()) {
        optionals.set(11);
      }
      if (struct.isSetBrowser()) {
        optionals.set(12);
      }
      if (struct.isSetBackupProperties()) {
        optionals.set(13);
      }
      if (struct.isSetBackupQuota()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetTierId()) {
        oprot.writeString(struct.tierId);
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetUrlDomain()) {
        oprot.writeString(struct.urlDomain);
      }
      if (struct.isSetUrlQuery()) {
        oprot.writeString(struct.urlQuery);
      }
      if (struct.isSetReportTime()) {
        oprot.writeI64(struct.reportTime);
      }
      if (struct.isSetFirstScreenTime()) {
        oprot.writeI64(struct.firstScreenTime);
      }
      if (struct.isSetWhiteScreenTime()) {
        oprot.writeI64(struct.whiteScreenTime);
      }
      if (struct.isSetOperableTime()) {
        oprot.writeI64(struct.operableTime);
      }
      if (struct.isSetResourceLoadedTime()) {
        oprot.writeI64(struct.resourceLoadedTime);
      }
      if (struct.isSetLoadedTime()) {
        oprot.writeI64(struct.loadedTime);
      }
      if (struct.isSetBrowser()) {
        oprot.writeString(struct.browser);
      }
      if (struct.isSetBackupProperties()) {
        {
          oprot.writeI32(struct.backupProperties.size());
          for (java.util.Map.Entry<String, String> _iter18 : struct.backupProperties.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
        }
      }
      if (struct.isSetBackupQuota()) {
        {
          oprot.writeI32(struct.backupQuota.size());
          for (java.util.Map.Entry<String, Long> _iter19 : struct.backupQuota.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeI64(_iter19.getValue());
          }
        }
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, TWebAgentLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tierId = iprot.readString();
        struct.setTierIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.urlDomain = iprot.readString();
        struct.setUrlDomainIsSet(true);
      }
      if (incoming.get(5)) {
        struct.urlQuery = iprot.readString();
        struct.setUrlQueryIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reportTime = iprot.readI64();
        struct.setReportTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.firstScreenTime = iprot.readI64();
        struct.setFirstScreenTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.whiteScreenTime = iprot.readI64();
        struct.setWhiteScreenTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operableTime = iprot.readI64();
        struct.setOperableTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.resourceLoadedTime = iprot.readI64();
        struct.setResourceLoadedTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loadedTime = iprot.readI64();
        struct.setLoadedTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.browser = iprot.readString();
        struct.setBrowserIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map20 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.backupProperties = new java.util.HashMap<String,String>(2*_map20.size);
          String _key21;
          String _val22;
          for (int _i23 = 0; _i23 < _map20.size; ++_i23)
          {
            _key21 = iprot.readString();
            _val22 = iprot.readString();
            struct.backupProperties.put(_key21, _val22);
          }
        }
        struct.setBackupPropertiesIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.backupQuota = new java.util.HashMap<String,Long>(2*_map24.size);
          String _key25;
          long _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readI64();
            struct.backupQuota.put(_key25, _val26);
          }
        }
        struct.setBackupQuotaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

