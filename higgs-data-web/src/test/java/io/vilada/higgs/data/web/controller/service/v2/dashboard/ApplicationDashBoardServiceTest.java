/* * Copyright 2018 The Higgs Authors * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package io.vilada.higgs.data.web.controller.service.v2.dashboard;import io.vilada.higgs.data.web.controller.service.DataServiceTestContext;import io.vilada.higgs.data.web.service.bo.in.dashboard.InternalHealthParamBO;import io.vilada.higgs.data.web.service.bo.out.dashboard.ResponseTimeTrend;import io.vilada.higgs.data.web.service.elasticsearch.service.v2.dashboard.ApplicationDashBoardService;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringRunner;/** * 功能及特点的描述简述: APM仪表盘ServiceTest * <p> * 项目名称: APM * * @author 丛树林 * @date 2018/03/08 */@Slf4j@RunWith(SpringRunner.class)@SpringBootTest()@ContextConfiguration(classes = DataServiceTestContext.class)public class ApplicationDashBoardServiceTest {    @Autowired    private ApplicationDashBoardService applicationDashBoardService;    @Test    public void responseTimeTrendNormalTest() {        InternalHealthParamBO internalHealthParamBO = InternalHealthParamBO.builder().build();        internalHealthParamBO.setAppId(722905091556839424L);        internalHealthParamBO.setStartTime(1518313520783L);        internalHealthParamBO.setEndTime(1520905520783L);        internalHealthParamBO.setAggrInterval(10800000L);        ResponseTimeTrend responseTimeTrend = applicationDashBoardService.getResponseTimeTrend(internalHealthParamBO);//        Assert.assertNotNull(responseTimeTrend);//        ResponseTimeTrend.P90TrendRow p90TrendRow = responseTimeTrend.getP90TrendRowList().get(0);//        Assert.assertNotNull(p90TrendRow);//        Assert.assertEquals("P90趋势", p90TrendRow.getTitle());//        Assert.assertNotNull(p90TrendRow.getP90Time());    }    @Test    public void responseTimeTrendNonDataTest() {        InternalHealthParamBO internalHealthParamBO = InternalHealthParamBO.builder().build();        internalHealthParamBO.setAppId(722905091556839424L);        internalHealthParamBO.setStartTime(1830268800000L);        internalHealthParamBO.setEndTime(1831478400000L);        internalHealthParamBO.setAggrInterval(10800000L);        ResponseTimeTrend responseTimeTrend = applicationDashBoardService.getResponseTimeTrend(internalHealthParamBO);//        Assert.assertNotNull(responseTimeTrend);////        for (ResponseTimeTrend.P90TrendRow p90TrendRow :responseTimeTrend.getP90TrendRowList()){//            Assert.assertEquals(0, p90TrendRow.getP90Time());//        }    }    @Test    public void responseTimeTrendNullAppIdTest() {        InternalHealthParamBO internalHealthParamBO = InternalHealthParamBO.builder().build();        // internalHealthParamBO.setAppId(722905091556839424L);        internalHealthParamBO.setStartTime(1518313520783L);        internalHealthParamBO.setEndTime(1520905520783L);        internalHealthParamBO.setAggrInterval(10800000L);        ResponseTimeTrend responseTimeTrend = applicationDashBoardService.getResponseTimeTrend(internalHealthParamBO);        // Assert.assertNotNull(responseTimeTrend);    }}